if (!sessionStorage.getItem('chatcreate_chat_id_1200')) {
    sessionStorage.setItem('chatcreate_chat_id_1200', uuidv4());
    sessionStorage.setItem('chatcreate_chat_id_1200_is_started', false);
}

var botInteractionsPresent = false;
var ccConversationId = sessionStorage.getItem('chatcreate_chat_id_1200');
var chatcreate_widget_show_popup;

function createElementFromHTML(h) {
    var d = document.createElement('div'); d.innerHTML = h.trim(); return d.firstChild;
}

var ChatCreateHandoffName = ((typeof ChatCreateHandoffName !== 'undefined') ? ChatCreateHandoffName : '');
var ChatCreateHandoffEmail = ((typeof ChatCreateHandoffEmail !== 'undefined') ? ChatCreateHandoffEmail : '');

var elem = createElementFromHTML('<iframe src="https://cdn.chatcreate.com/api/bots/1200/snippet/iframe?channelName=standalone&channel_id=' + ccConversationId + '&ChatCreateHandoffName=' + ChatCreateHandoffName + '&ChatCreateHandoffEmail=' + ChatCreateHandoffEmail + '&url=' + encodeURIComponent(window.location.href) + '&isStarted=' + sessionStorageGetIsStarted() + '&dismissedFlows=' + sessionStorageGetDismissedFlows().join(',') + '" id="cc-window" style="border: none; background-color: transparent; z-index: 999999; transform: scale(0); transform-origin: calc(100% - 52px) calc(100% + 26px); position: fixed; transition: all 250ms cubic-bezier(0.645, 0.045, 0.355, 1), top, bottom; opacity: 0; width: 420px; max-width: 100%; height: 0; max-height: calc(100% - 72px); min-height: 0; margin-right: 0px; right: 0px; bottom: 72px; background-position: initial initial; background-repeat: initial initial;"></iframe>');
document.body.appendChild(elem);

var elem = createElementFromHTML('<iframe src="https://cdn.chatcreate.com/api/bots/1200/snippet/button?channelName=standalone" id="cc-button" style="border: 0; width: 110px; height: 110px; position: fixed; bottom: 0; right: 0; z-index: 999998;"></iframe>');
document.body.appendChild(elem);

if (window.addEventListener) {
    window.addEventListener("message", onMessage, false);
}
else if (window.attachEvent) {
    window.attachEvent("onmessage", onMessage, false);
}

applyWidgetState();

function onMessage(event) {
    handleEvent(event);

    if (event.data.func === "restart") {
        ccRestartWidget();
    }

    if (event.data.func === "scrollDialog") {
        ccScrollDialog();
    }
}

function ccRestartWidget() {
    sessionStorage.clear('chatcreate_chat_id_1200');

    sessionStorage.setItem('chatcreate_chat_id_1200', uuidv4());
    sessionStorage.setItem('chatcreate_chat_id_1200_stored_parameters', JSON.stringify([]));
    sessionStorage.setItem('chatcreate_chat_id_1200_is_started', false);
    var botInteractionsPresent = false;

    ccConversationId = sessionStorage.getItem('chatcreate_chat_id_1200');
    var ccWindow = document.getElementById('cc-window');
    ccWindow.src = 'https://cdn.chatcreate.com/api/bots/1200/snippet/iframe?channelName=standalone&restart=true&channel_id=' + ccConversationId;
}

function uuidv4() {
    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
}

function applyWidgetState() {
    if (sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state') === 'opened') {
        setTimeout(ccRemoveTransparency, 1000);
        setTimeout(ccShowWidget,1000);
    }

    setTimeout(ccSetUnreadMessageCount,1000 );
}

function sessionStorageGetDismissedFlows() {
    return JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_dismissed_flows')) || [];
}

function sessionStorageGetTriggeredFlow() {
    return JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_triggered_flow')) || '';
}

function sessionStorageGetIsStarted() {
    return JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_is_started'));
}

function handleEvent(event) {
    if (event.origin !== "https://cdn.chatcreate.com") return;

    if (event.data.func === "showWidget") {
        ccShowWidget(event.data.height);
        clearTimeout(chatcreate_widget_show_popup);
    }

    if (event.data.func === "hideWidget") {
        const triggeredFlow = JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_triggered_flow'));
        if (triggeredFlow) ccDismissFlow(triggeredFlow);
        sessionStorage.setItem('chatcreate_chat_id_1200_unread_message_count', 0);
        ccSetUnreadMessageCount();
        ccHideWidget();
    }

    if (event.data.func === "notifyOfNewInteraction") {
        let currentCount = parseInt(sessionStorage.getItem('chatcreate_chat_id_1200_unread_message_count'));
        const chatAreaState = sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state');

        sessionStorage.setItem('chatcreate_chat_id_1200_last_interaction_id', event.data.value);

        if (chatAreaState === 'opened' || sessionStorageGetDismissedFlows().includes(sessionStorageGetTriggeredFlow())) {
            sessionStorage.setItem('chatcreate_chat_id_1200_last_seen_interaction_id', event.data.value);
        } else {
            if (event.data.value === parseInt(sessionStorage.getItem('chatcreate_chat_id_1200_last_seen_interaction_id'))) {
                sessionStorage.setItem('chatcreate_chat_id_1200_unread_message_count', 0);
            } else {
                sessionStorage.setItem('chatcreate_chat_id_1200_unread_message_count', currentCount ? currentCount++ : 1);
            }
            ccSetUnreadMessageCount();
        }
    }

    if (event.data.func === "markLastInteractionAsSeen") {
        sessionStorage.setItem('chatcreate_chat_id_1200_last_seen_interaction_id', event.data.value);
        sessionStorage.setItem('chatcreate_chat_id_1200_unread_message_count', 0);
        ccSetUnreadMessageCount();
    }

    if (event.data.func === "transparentWidget" && !sessionStorageGetDismissedFlows().includes(sessionStorageGetTriggeredFlow()) && window.innerWidth >= 992) {
        const delayInSeconds = parseInt(event.data.delay);
        if (delayInSeconds) {
            chatcreate_widget_show_popup = setTimeout(ccShowWidget, delayInSeconds*1000, event.data.height);
            sessionStorage.setItem('chatcreate_chat_id_1200_chat_area_state', 'transparent');
        }
    }

    if (event.data.func === 'navigateTo') {
        if (isValidHttpUrl(event.data.value)) {
            window.location.href = event.data.value;
        }
    }

    if (event.data.func === 'setIsStarted') {
        sessionStorage.setItem('chatcreate_chat_id_1200_is_started', true);
        sendStoredParameters();
    }

    if (event.data.func === 'setTriggeredFlow') {
        sessionStorage.setItem('chatcreate_chat_id_1200_triggered_flow', event.data.value);
    }
}

function ccSendMessageToButton(message)
{
    document.getElementById("cc-button").contentWindow.postMessage({
        'func': message,
    }, "*");
}

function ccSetButtonOpened(hidden)
{
    if (hidden == 'hidden') {
        ccSendMessageToButton('opened-transparent');
    } else {
        ccSendMessageToButton('opened');
    }
}

function ccSetButtonClosed()
{
    ccSendMessageToButton('closed');
}

function ccShowWidget(height = '630px')
{
    var ccWindow = document.getElementById('cc-window');
    ccWindow.style.opacity = '1';
    ccWindow.classList.add('cc-visible');

    sessionStorage.setItem('chatcreate_chat_id_1200_last_seen_interaction_id', sessionStorage.getItem('chatcreate_chat_id_1200_last_interaction_id'));
    sessionStorage.setItem('chatcreate_chat_id_1200_widget_height', height);

    if (height == '630px') {
        if (sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state') !== 'opened') {
            ccRemoveTransparency();
        }
        ccSetButtonOpened();
        sessionStorage.setItem('chatcreate_chat_id_1200_chat_area_state', 'opened');
        ccWindow.style.transform = 'scale(1) translateY(0)';
        if (window.innerWidth < 992) {
            ccEnableMobileWidget();
        } else {
            ccDisableMobileWidget();
        }
    } else {
        sessionStorage.setItem('chatcreate_chat_id_1200_chat_area_state', 'transparent');
        ccSetButtonOpened('hidden');
        ccWindow.style.transform = 'scale(1) translateY(85px)';
        ccWindow.style.height = height;
    }
}

function ccHideWidget()
{
    var ccWindow = document.getElementById('cc-window');

    ccWindow.style.transform = 'scale(0) translateY(85px)';
    ccWindow.style.opacity = '0';
    ccWindow.style.height = '0';
    ccWindow.classList.remove('cc-visible');
    document.body.style.overflow = 'unset';

    ccSetButtonClosed();
    sessionStorage.setItem('chatcreate_chat_id_1200_chat_area_state', 'closed');
}

function ccScrollDialog()
{
    document.getElementById("cc-window").contentWindow.postMessage({
        'func': 'scrollDialog',
    }, "*");
}

function ccRemoveTransparency()
{
    document.getElementById("cc-window").contentWindow.postMessage({
        'func': 'removeTransparency'
    }, "*");
}

function ccSetParameter(key, value)
{
    if (JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_is_started'))) {
        document.getElementById("cc-window").contentWindow.postMessage({
            'func': 'setParameter',
            'key': key,
            'value': value,
        }, "*");
    } else {
        var ccStoredParameters = JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_stored_parameters'));
        ccStoredParameters.push({'key': key, 'value': value})
        sessionStorage.setItem('chatcreate_chat_id_1200_stored_parameters', JSON.stringify(ccStoredParameters) );
    }
}

function ccSetUnreadMessageCount()
{
    document.getElementById("cc-button").contentWindow.postMessage({
        'func': 'setUnreadMessageCount',
        'value': parseInt(sessionStorage.getItem('chatcreate_chat_id_1200_unread_message_count')) || 0,
    }, "*");
}

function ccDismissFlow(flow)
{
    sessionStorage.setItem('chatcreate_chat_id_1200_dismissed_flows', JSON.stringify([...(sessionStorageGetDismissedFlows()), flow]));
}

var ccInitialOverflowValue = document.body.style.overflow;

function ccEnableMobileWidget()
{
    var ccWindow = document.getElementById('cc-window');
    ccWindow.style.width = '100%';
    ccWindow.style.height = '100%';
    ccWindow.style.maxHeight = '100%';
    ccWindow.style.setProperty("bottom", "0", "important");
    ccWindow.style.overflow = 'hidden';
    document.body.style.overflow = 'hidden';

    if (sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state') !== 'opened') {
        ccRemoveTransparency();
    }

    ccWindow.contentWindow.postMessage({
        'func': 'enableMobileWidget',
    }, "*");

}

function ccDisableMobileWidget()
{
    var ccWindow = document.getElementById('cc-window');
    ccWindow.style.width = '420px';
    ccWindow.style.maxHeight = 'calc(100% - 72px)';
    ccWindow.style.bottom = '72px';
    document.body.style.overflow = ccInitialOverflowValue || '';

    if (sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state') == 'opened') {
        ccWindow.style.height = '630px';
    }

    ccWindow.contentWindow.postMessage({
        'func': 'disableMobileWidget',
    }, "*");

    setTimeout(ccScrollDialog, 250);
}

function scaleWidgetToWindow() {
    if (sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state') == 'opened' || sessionStorage.getItem('chatcreate_chat_id_1200_chat_area_state') == 'transparent') {
        if (window.getComputedStyle(document.getElementById("cc-window")).display != "none") {
            if (window.innerWidth < 992) {
                ccEnableMobileWidget();
            } else {
                ccDisableMobileWidget();
            }
        }
    }
}

window.onresize = scaleWidgetToWindow;

if (!sessionStorage.getItem('chatcreate_chat_id_1200_stored_parameters')) {
    sessionStorage.setItem('chatcreate_chat_id_1200_stored_parameters', JSON.stringify([]));
}

function sendStoredParameters()
{
    var ccStoredParameters = JSON.parse(sessionStorage.getItem('chatcreate_chat_id_1200_stored_parameters'));
    sessionStorage.setItem('chatcreate_chat_id_1200_stored_parameters', JSON.stringify([]));
    ccStoredParameters.forEach(function(item,index) {
        ccSetParameter(item['key'], item['value']);
    });
}

function isValidHttpUrl(string) {
    let url;
    try {
        url = new URL(string);
    } catch (_) {
        return false;
    }
    return url.protocol === "http:" || url.protocol === "https:";
}
