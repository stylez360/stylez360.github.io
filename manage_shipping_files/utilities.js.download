var _globBuff = JSON.stringify({
    "dp": "22:4e:1c:79:30:48:af:0a:f2:e0:99:66:a2:39:eb:22:c9:0e:0d:2b:79:4c:3b:cf:cd:01:3e:08:07:7c:9c:8e:8c:c5:39:f7:cb:b7:dc:db:06:ee:40:b1:d4:db:27:98:3e:1f:14:4b:69:b0:8c:6b:0f:45:ac:9c:8b:3e:d8:2c:8d:39:b1",
    "dq": "00:f3:5c:5a:33:b5:08:c9:3b:af:71:c1:16:01:0b:98:6b:df:22:9d:00:dc:68:37:69:91:c1:38:57:81:85:68:11:71:81:cd:9a:30:55:27:8d:8f:ee:8c:b6:6f:91:16:31:57:e7:6e:98:b1:09:e5:61:df:fd:64:32:1d:36:ae:b9:0a:fb:ed",
    "qi": "0f:a9:06:b8:51:44:98:84:9e:d7:92:5f:0d:24:0a:f0:3f:e1:bb:86:52:93:e5:b4:53:c9:6c:0a:da:ef:70:1b:83:99:a4:9a:15:e8:cb:43:5b:f7:14:9b:d5:a0:8c:0d:47:c0:af:22:c4:d7:91:73:82:97:f4:3a:eb:a8:01:cd:61:a4:f8"
});

// Global FWS object -- can be called anywhere in ridge
FWS = {};

// Auth token utilities

// COLORS
FWS.green = '#5DC548';
FWS.pink = '#ea1686';

fws = FWS; // can use lowercase aswell?

//Set default post to application/json and ridge header
axios.defaults.headers.post['Content-Type'] = 'application/json';
axios.defaults.headers.common['cache-control'] = 'no-cache, no-store';
axios.defaults.headers.common['pragma'] = 'no-cache';

// Auth token utilities
FWS.COGNITO_ID_TOKEN = 'cognitoIdToken';
FWS.COGNITO_ACCESS_TOKEN = 'cognitoAccessToken';
FWS.COGNITO_REFRESH_TOKEN = 'cognitoRefreshToken';
FWS.RIDGE_TOKEN = 'ridgeToken';
FWS.setAuthTokens = function (data) { return setAuthTokens(data); };
FWS.getAuthToken = function (id) { return getAuthToken(id); };
FWS.clearAllAuthTokens = function () { clearAllAuthTokens(); };

// Get Auth Token
function getAuthToken(id) { return Cookies.get(id) ? Cookies.get(id) : null; }

// Set Auth Token
function setAuthTokens(data) {
    data.cognitoRefreshToken ? Cookies.set(FWS.COGNITO_REFRESH_TOKEN, data.cognitoRefreshToken, { expires: 1 }) : null;
    data.cognitoIdToken ? Cookies.set(FWS.COGNITO_ID_TOKEN, data.cognitoIdToken, { expires: 1 }) : null;
    data.cognitoAccessToken ? Cookies.set(FWS.COGNITO_ACCESS_TOKEN, data.cognitoAccessToken, { expires: 1 }) : null;
    data.ridgeToken ? Cookies.set(FWS.RIDGE_TOKEN, data.ridgeToken, { expires: 1 }) : null;
}

// Remove Tokens
function clearCognitoAccessToken() { Cookies.remove(FWS.COGNITO_ACCESS_TOKEN); }

function clearCognitoIdToken() { Cookies.remove(FWS.COGNITO_ID_TOKEN); }

function clearCognitoRefreshToken() {
    Cookies.remove(FWS.COGNITO_REFRESH_TOKEN);
}

function clearRidgeToken() { Cookies.remove(FWS.RIDGE_TOKEN); }

function clearCognitoTokens() {
    clearCognitoAccessToken();
    clearCognitoIdToken();
}

function clearAllAuthTokens() {
    clearCognitoTokens();
    clearRidgeToken();
    clearCognitoRefreshToken();
}


// Check user limits
var checkUserLimitsCounts = 0;
ready(function () {
    if (typeof storeId !== "undefined") {
        if (storeId !== null) checkUserLimits();
    }
});

var _math = (function () {
    "use strict";

    function _math() { }

    var _proto = _math.prototype;

    _proto.nth = function nth(n) {
        return ["st", "nd", "rd"][((((n + 90) % 100) - 10) % 10) - 1] || "th";
    };

    _proto.toFixedNumber = function toFixedNumber(num, digits, base) {
        var pow = Math.pow(base || 10, digits);
        return Math.round(num * pow) / pow;
    }

    return _math;
})();


function checkUserLimits() {
    if (typeof storeId !== "undefined") {

        axiosGet("/services/billing/billing.svc/getBillingActivityLatest?storeId=" + storeId).then(function (data) {

            var limits = data.d || data;

            if (limits != null) {
                limits = JSON.parse(limits);
                var currentUrl = location.pathname;
                currentUrl = currentUrl.replace(/.aspx/, "");

                var whiteList = [
                    "/ridge_upgrade",
                    "/ridge_quota",
                    "/account_subscription_packages",
                    "/supportv2",
                    "/support_new_ticket",
                    "/support_mysupport",
                    "/support_thanks",
                    "/account_close",
                    "/account_invoices",
                    "/account_subscription_list",
                    "/account_subscription_info",
                    "/account_invoices_unpaid",
                    "/account_usage",
                    "/account_usage_bandwidth",
                    "/account_usage_revenue",
                    "/account_usage_storage",
                    "/upgrade",
                    "/upgrade2",
                    "/accountv2",
                    "/manage_images"
                ];

                if (limits.bandwidth_percent >= 100 || limits.storage_percent >= 100 || limits.turnover_percent >= 100) {
                    if (whiteList.indexOf(currentUrl) == -1) {
                        if (trialExists != null && trialExists != "True" && location.hostname != "ridge.fw1.biz") {
                            location.href = "/ridge_quota.aspx";
                        }
                    }
                }

            }

        }).catch(function (err) {

        }).then(function () {

        });
    } else {

        checkUserLimitsCounts++;

        if (checkUserLimitsCounts < 5) {
            setTimeout(function () {
                checkUserLimits();
            }, 1500);
        }

    }
}


checkTrial();
function checkTrial() {

    if (typeof trialExists !== "undefined") {
        if (trialExists == "True" && trialConverted != 'True' && trialConverted != '1') {
            
            setTimeout(function () {
                showById("header_notification_trial");
            }, 500);

            setTimeout(function () {
                if (trialDateDifference > 1) {
                    document.getElementById("header_notification_trial").innerHTML = "<span id='header_notification_trial_span1'>Trial Ends in </span>" + trialDateDifference + " days<span id='header_notification_trial_span2'>Upgrade Now</span>";
                    document.getElementById("header_notification_trial").setAttribute("title", "Trial Ends in " + trialDateDifference + " days");
                } else if (trialDateDifference > 0) {
                    document.getElementById("header_notification_trial").innerHTML = "<span id='header_notification_trial_span1'>Trial Ends in less than </span>1 day<span id='header_notification_trial_span2'>Upgrade Now</span>";
                    document.getElementById("header_notification_trial").setAttribute("title", "Trial Ends in less than 1 day");
                } else {
                    document.getElementById("header_notification_trial").innerHTML = "<span id='header_notification_trial_span1'>Trial Ended<span id='header_notification_trial_span2'>Upgrade Now</span>";
                    document.getElementById("header_notification_trial").setAttribute("title", "Trial Ended");
                }
            }, 1000);
        }
    }

}

// Get StoreId from ridgeToken
function getStoreId() {
    return storeId;
}

// Gets the hash value from url.
function getHashValue(key) {
    var matches = location.hash.match(new RegExp(key + '=([^&]*)'));
    return matches ? matches[1] : null;
}

// Get Query String param from url
function getQueryStringParam(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

// Refresh Cognito Tokens
function refreshCognitoTokens(storeId) {
    var url = 'services/auth/Helpers.svc/RefreshCognitoTokens';
    var cognitoRefreshToken = getAuthToken(FWS.COGNITO_REFRESH_TOKEN);

    var data = {
        storeId: storeId,
        cognitoRefreshToken: cognitoRefreshToken
    };
    axiosPostRidge(url, data).then(function(res) {
        result = res.d;

        trace('Successfully got refresh tokens', result);

        setAuthTokens(result);
    }).catch(function(err) {
        formatErrorMessageAxios(err);
    });
}


/* Canvas JS Shades */
function getCanvasShades() {

    CanvasJS.addColorSet("fws_blue", ["#20b7e6", "#228AAB", "#60cbec"]);
    CanvasJS.addColorSet("fws_pink", ["#EA1686", "#C51170", "#f147a1"]);
    CanvasJS.addColorSet("fws_green", ["#5DC548", "#57b544", "#3f8431"]);
    CanvasJS.addColorSet("fws_dark", ["#212121", "#383838", "#5d5d5d"]);
    CanvasJS.addColorSet("ridge_dblue", ["#172550", "#3a5eca", "#1d2f65"]);
    CanvasJS.addColorSet("ridge_lblue", ["#3a5eca", "#172550", "#1d2f65"]);

    return cpTheme;
}

function getRidgeCanvasShades() {
    CanvasJS.addColorSet("shades",
        [
            "#172550", "#3a5eca", "#1d2f65", "#3454b5", "#223879", "#2e4ba1", "#28418d",
        ]
    );
    return 'shades';
}

function stripHTML(input) {
    if (input != null) {
        input = input.replace(/&#(\d+);/g, function (match, dec) {
            return String.fromCharCode(dec);
        });
        input = input.replace(/\#/gm, '%23');
        input = input.replace(/<(?:.|\n)*?>/gm, '');
        input = filterXSS(input);
        return input;
    } else {
        return '';
    }
}

function stripHTMLPost(input) {
    if (input != null) {
        input = input.replace(/&#(\d+);/g, function (match, dec) {
            return String.fromCharCode(dec);
        });
        input = input.replace(/<(?:.|\n)*?>/gm, '');
        input = filterXSS(input);
        return input;
    } else {
        return '';
    }
}

function stripQuotes(input) {
    if (input != null) {
        input = input.replace(/\"/gm, '%22');
        input = input.replace(/\'/gm, "%27");
        return input.replace(/<(?:.|\n)*?>/gm, '');
    } else {
        return '';
    }
}

function parseTextOnly(input) {
    try {
        var clean = DOMPurify.sanitize(input, { KEEP_CONTENT: false, ALLOWED_TAGS: ['#text'] });
        return clean;
    } catch (e) {
                return input;
    }
}

function catchUnicode(input) {
    var r = /\\u([\d\w]{2,4})/gi;
    x = input.replace(r, function (match, grp) {
        var c = String.fromCharCode(parseInt(grp, 16));
        return c;
    });
    return x;
}

function parseTextAndStrip(input) {
    try {
        input = catchUnicode(input);
        input = decodeURIComponentSafe(input);
        var clean = parseTextOnly(input);
        var stripped = stripHTML(clean);
        return stripped;
    } catch (e) {
                return input;
    }
}

function parseTextAndStripPost(input) {
    try {
        input = catchUnicode(input);
        input = decodeURIComponentSafe(input);
        var clean = parseTextOnly(input);
        var stripped = stripHTMLPost(clean);
        return stripped;
    } catch (e) {
                return input;
    }
}

function codeToHtmlEntities(input) {

    var tagsToReplace = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;'
    };
    return input.replace(/[&<>]/g, function (tag) {
        return tagsToReplace[tag] || tag;
    });

}

function stylingHTML(input) {

    if (input != null) {
        input = input.replace(/\<br>/gm, '%3Cbr%3E');
        input = input.replace(/\<b>/gm, "%3Cb%3E");
        input = input.replace(/\<b>/gm, "%3C%2Fb%3E");
        return input;
    } else {
        return '';
    }

}

//String.prototype.replaceAll = function (str1, str2, ignore) {
//    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), (ignore ? "gi" : "g")), (typeof (str2) == "string") ? str2.replace(/\$/g, "$$$$") : str2);
//}

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};
function capitalizeFirstLetter(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
}

function strToBool(s) {
    regex = /^\s*(true|1|on)\s*$/i
    return regex.test(s);
}

function boolToInt(s) {
    if (s) {
        return 1;
    } else {
        return 0;
    }
}

function validateEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
}

function parseFloatFixed(x) {
    x = parseFloat(x.toFixed(2));
    if (x % 1 === 0) {
        x = Math.round(x);
    }
    return x;
}

function parseFloatFixed2(x) {
    x = parseFloat(x.toFixed(2));
    if (x % 1 === 0) {
        x = Math.round(x);
    }
    x = x.toFixed(2);
    return x;
}

function parseFloatStringToNumberFixed2(x) {
    x = parseFloat(x);
    x = parseFloat(x.toFixed(2));
    if (x % 1 === 0) {
        x = Math.round(x);
    }
    x = x.toFixed(2);
    x = Number(x);
    return x;
}

function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function isInt(n) {
    return n % 1 === 0;
}

function intOnly(el) {
    $(el).keypress(function (e) {
        if ((e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == 46 || e.keyCode == 44) {
            return true;
        } else {
            return false;
        }
    });
}

function intPositiveOnly(el) {
    if ($(el).val() < 0) {
        $(el).val(0);
    }
}

function makeUrlFriendly(url) {

    url = url.trim();
    url = stripHTMLPost(url);

    url = url.replace(/[^0-9a-zA-Z-_ \u0100-\u107FÀ-ÖØ-öø-ÿ]/g, "");
    url = url.replace(/[ ]/g, "-");
    url = url.replace(/-{2,}/g, '-');
    url = url.replace(/(-?\s*)$/, "");
    url = url.replace(/(-?\s*)/, "");
    url = url.replace(/_{2,}/g, '_');
    url = url.replace(/(_?\s*)$/, "");
    url = url.replace(/(_?\s*)/, "");
    return url;
}

function selAll(selector) {
    return document.querySelectorAll(selector);
}

function safeWrapStr(str) {
    try {
        return str.replace(/(["'])[^]*?/gm, "\\$1");
    } catch (Error) {
                return str;
    }
}

function parseJwt(token) { var base64Url = token.split('.')[1]; var base64 = base64Url.replace('-', '+').replace('_', '/'); return JSON.parse(window.atob(base64)); };

function trace(s, args) {
    if (location.hostname === "localhost" || location.hostname === "ridge.fw1.biz") {
        var stage = 'dev';

        if (!args) args = '';

        if (stage === 'dev') {
            try {
                            }
            catch (e) {
                alert('Unable to trace:' + s);
            }
        } else { } // Do nothing
    }
}

String.prototype.trimToLength = function (m) {
    return (this.length > m)
        ? jQuery.trim(this).substring(0, m).split(" ").slice(0, -1).join(" ") + "..."
        : this;
};

// Close modal
function closeModal() {
    $("body").removeClass("body_modal_is_open");
    $(".modal_overlay, .modal, .modal_forced, .overlay_forced, .modal_doverlay, .modal_links, .modal_x_button").fadeOut();
}

function axiosGet(url) {
    return axios.get(url)
    .then(function(response) {
        return Promise.resolve(response.data);
    }).catch(function(error) {
        //typeof error !== "undefined" && error != null ? typeof error === "object" ? beaver.error(error.message) : typeof error === "string" ? beaver.error(error) : beaver.error(JSON.stringify(error)) : void 0;
        if (typeof error === "undefined" || error == null) return Promise.reject("Something went Wrong");
        var errorMessage = typeof error.response !== "undefined" ? error.response.data : error.message;
        if (typeof error.response !== "undefined") {
            if (error.response.status === 404) {
                errorMessage = "404: The page, file or content was not found.";
            } else if (error.response.status === 401) {
                if (location.pathname.toLowerCase() !== '/login' && location.pathname.toLowerCase() !== '/login.aspx') {
                    window.location.href = "/login";
                    return true;
                }
                return Promise.reject(errorMessage);
            }
        }
        return Promise.reject(errorMessage);
    });
}

function axiosPost(url, data) {
    return axios.post(url, data).then(function(response) {
        return Promise.resolve(response.data);
    }).catch(function (error) {
        //typeof error !== "undefined" && error != null ? typeof error === "object" ? beaver.error(error.message) : typeof error === "string" ? beaver.error(error) : beaver.error(JSON.stringify(error)) : void 0;
        if (typeof error === "undefined" || error == null) return Promise.reject("Something went Wrong");
        var errorMessage = typeof error.response !== "undefined" ? error.response.data : error.message;
        if (typeof error.response !== "undefined") {
        if (error.response.status === 404) {
            errorMessage = "404: The page, file or content was not found.";
        } else if (error.response.status === 401) {
           if (location.pathname.toLowerCase() !== '/login' && location.pathname.toLowerCase() !== '/login.aspx') { 
                window.location.href = "/login";
                return true;
            }
            return Promise.reject(errorMessage);
            }
        }
        return Promise.reject(errorMessage);
    });
}

function axiosPostRidge(url, data) {
    return axios({ method: 'post', url: url, data: data, headers: { "x-ridge-token":  Cookies.get('ridgeToken') ? Cookies.get('ridgeToken') : null } })
        .then(function(response) {
            return Promise.resolve(response.data);
        })
        .catch(function(error) {
                        var errorMessage = error.response.data;
            if (error.response.status === 404) {
                errorMessage = "404: The page, file or content was not found.";
            }
            return Promise.reject(errorMessage);
        });
}

function ajaxPostUtil(url, data, cb) {

    jQuery.ajax({
        async: true,
        cache: false,
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        type: 'POST',
        url: url,
        data: data,
        success: function (data) {
           trace('ajaxPostUtil:success');
            cb(data)
        },
        error: function (request, status, error) {
            trace('ajaxPostUtil:error');
            trace(request, error);
            cb(request);
        },
        complete: function () {
            trace('ajaxPostUtil:complete');
        }
    });
}

function ajaxGetUtil(url, cb) {

    jQuery.ajax({
        async: true,
        cache: false,
        url: url,
        dataType: "json",
        success: function (data) {
            trace('ajaxGetUtil:success');

            // callback with data
            cb(data)
        },
        error: function (request, status, error) {
            trace('ajaxGetUtil:error');
            cb(request)
        },
        complete: function () {
            trace('ajaxGetUtil:complete');
        }
    });
}

function ajaxPostUtilV2(url, data, cb) {
	    jQuery.ajax({
        headers: {
            'x-ridge-token': Cookies.get('ridgeToken') ? Cookies.get('ridgeToken') : null
        },
        async: true,
        cache: false,
        contentType: 'application/json',
        dataType: 'json',
        type: 'POST',
        url: url,
        data: data,
        success: function (data) {
            trace('ajaxPostUtil:success');

            cb(null, data);
        },
        error: function (request, status, error) {
            trace('ajaxPostUtilV2:error');
            trace(request, error);
            
            // Redirect to logout if they have tampered with the token
            if (request.responseJSON) {
                if (request.responseJSON.Message == "Unauthorized")
                    return location = '/logout';
            }
            
            // Otherwise callback with the the error message
            cb(request);
        }
    });
}

function has(object, key) {
    return object ? hasOwnProperty.call(object, key) : false;
}

function grab(url, cb) {
    ajaxGetUtilV2(url, function (err, data) {
        if (err) {
            cb(err);
        } else {
            //
            var response = null;

            try {
                response = JSON.parse(data);
            } catch (e) {
                response = data;
            }

            cb(null, response);
        }
    })
}

function sendReq(url, data, cb) {
	ajaxPostUtilV2(url, data, function (err, data) {
		if (err) {
			cb(err);
		} else {
			var response = null;

			try {
				response = JSON.parse(data);
			} catch (e) {
				response = data;
			}

			cb(null, response);
		}
	})
}

function ajaxPostUtilV2(url, data, cb) {

	jQuery.ajax({
		method: "POST",
		async: true,
		cache: false,
		url: url,
		dataType: "json",
		data: data,
		success: function (data) {
			data = data.d || data
			var response = null;
			try {
				response = JSON.parse(data)
			} catch (e) {
				response = data;
			}
			// callback with data
			cb(null, data)
		},
		error: function (request, status, error) {
			trace('ajaxPostUtilV2:error');

			// Redirect to logout if they have tampered with the token
			if (request.responseJSON) {
				if (request.responseJSON.Message == "Unauthorized")
					return location = '/logout';
			}
			// Otherwise callback with the the error message
			cb(request);
		}
	});
}

function ajaxGetUtilV2(url, cb) {

    jQuery.ajax({
        async: true,
        cache: false,
        url: url,
        dataType: "json",
        success: function (data) {
            //trace('ajaxGetUtilV2:success');

            data = data.d || data

            var response = null;

            try {
                response = JSON.parse(data)
            } catch (e) {
                response = data;
            }

            // callback with data
            cb(null, data)
        },
        error: function (request, status, error) {
            trace('ajaxGetUtilV2:error');

            // Redirect to logout if they have tampered with the token
            if (request.responseJSON) {
                if (request.responseJSON.Message == "Unauthorized")
                    return location = '/logout';
            }
            // Otherwise callback with the the error message
            cb(request);
        }
    });
}

function formatErrorMessageAxios(message) {
    $(".overlay_forced, .error_modal").fadeIn();
    $("body").addClass("body_modal_is_open");
    $(".error_modal_issue1").html("We ran into an issue!");
    $(".error_modal_issue2").html(message);

    //Update the UI <-- What is this from???? Can it not use the generic one above?
    try {
        $("#error_status").html("We ran into an issue!");
        $("#error_detail").html(message);
        $(".sending_process1").hide();
        $(".sending_process2").show();
    } catch (e) {
            }
}

function formatErrorMessage(jqXHR, exception) {
    if (jqXHR.status == 0) {

    } else {
        trace('formatErrorMessage');

        //        //        //        var message = parseErrorMessage(jqXHR, exception);

        //Generic error modal
        $(".overlay_forced, .error_modal").fadeIn();
        $("body").addClass("body_modal_is_open");
        $(".error_modal_issue1").html(exception);
        $(".error_modal_issue2").html(message);

        //Update the UI <-- What is this from???? Can it not use the generic one above?
        try {
            $("#error_status").html(exception);
            $("#error_detail").html(message);
            $(".sending_process1").hide();
            $(".sending_process2").show();
        }
        catch (e) { }
    }
    return;
}

function productValidationErrorMessage(jqXHR, exception) {
    if (jqXHR.status == 0) {

    } else {
        trace('formatErrorMessage');

        //        //        //
        var err_obj;

        try {
            err_obj = JSON.parse(jqXHR.Message);
        }
        catch (e) {
            try {
                err_obj = jqXHR.ExceptionDetail.Message
            } catch (e2) {

                if (jqXHR.responseJSON && jqXHR.responseJSON.Message) {
                    err_obj = jqXHR.responseJSON.Message;
                } else {
                    err_obj = 'Failed to parse XHR object. XHR: [' + JSON.stringify(jqXHR, null, 2) + ']' 
                }
            }
        }

        var type;

        try {
            type = err_obj.type;
        }
        catch (e) {
            type = 'UnkownType';
        }

        var html = '';

        if (err_obj) {
            if (err_obj.errors) {
                if (err_obj.errors.length === 0) return;

                $.each(err_obj.errors, function () {
                    html += '<p>' + this.message + '</p>';
                });
            } else {
                if (err_obj.message) {
                    html = err_obj.message;
                } else {
                    html = err_obj;
                }
            }
        } else {
            if (jqXHR.message) {
                html = jqXHR.message;
            } else {
                html = 'Failed to parse XHR object. XHR: [' + jqXHR + ']';
            }
        }


        // Generic error modal
        $(".modal_overlay, .error_modal").fadeIn();
        $("body").addClass("body_modal_is_open");
        $(".error_modal_issue1").html(type);
        $(".error_modal_issue2").html(html);


        // Close saving modal
        $(".save_process_main").hide();
        $(".save_modal, .save_process1").fadeOut();
        save_changes_detected = true;
        $(".modal_overlay, .modal").fadeOut();
    }
    return;
}

function parseErrorMessage(jqXHR, exception) {
    var message = 'Unspecified Error';
    var xtra_detail = '';
    //debugger
    try {
        xtra_detail = jqXHR.responseJSON.Message;
    }
    catch (e) { }

    if (!navigator.onLine) {
        message = 'Not connected. Please verify your network connection.';
    } else if (jqXHR.status == 404) {
        message = 'The requested page not found. [404]';
    } else if (jqXHR.status == 0) {

    }
    else if (jqXHR.status == 500) {
        message = xtra_detail;
    } else if (exception === 'parsererror') {
        message = 'Requested JSON parse failed.';
    } else if (exception === 'timeout') {
        message = 'Time out error.';
    } else if (exception === 'abort') {
        message = 'Ajax request aborted.';
    } else {
        message = 'Uncaught Error:\r\n' + encodeURIComponent(jqXHR.responseText);
    }

    return message;
}

function getUser(uid) {
    axiosGet("/services/User.svc/GetUser?userId=" + uid).then(function(data) {
        var user = data.d;

        $("#master_user_name").html("" + user.userName);
        trace(user);
        if (user.stores.length > 1) {
            $("#master_store_switch").show();

            $(".switch_accounts").html("");

            var newMarkup = "";

            $.each(user.stores,
                function() {

                    if (this.verified)
                        if (this.sid == storeId)
                            newMarkup += "<div class=\"switch_accounts_item width_50 switch_accounts_item_active\">";
                        else
                            newMarkup += "<div class=\"switch_accounts_item width_50\">";
                    else
                        newMarkup += "<div class=\"switch_accounts_item switch_accounts_item_not_verified width_50\">";


                    newMarkup += "<a href=\"" +
                        this.url +
                        "\" target=\"_blank\" class=\"switch_accounts_item_link\"><i class=\"fa fa-external-link\" aria-hidden=\"true\"></i></a>";
                    newMarkup += "<div class=\"switch_accounts_item_name\">" + this.name + "</div>";
                    newMarkup += "<div class=\"switch_accounts_item_url\">" + this.url + "</div>";
                    newMarkup += "<img src=\"/GetStoreThumb.aspx?sid=" +
                        this.sid +
                        "\" class=\"switch_accounts_item_image\" />";

                    if (this.sid == storeId)
                        newMarkup += "<a class=\"button button_primary\">This account</a>";
                    else if (this.verified)
                        newMarkup += "<a class=\"button button_white_blue\" onclick=\"javascript:switchStore('" +
                            uid +
                            "','" +
                            this.sid +
                            "');\">Switch</a>";
                    else
                        newMarkup += "<a class=\"button button_red\" onclick='RequestActivation(" +
                            this.sid +
                            ")'>Not Verified</a>";

                    newMarkup += "</div>";
                });

            $(".switch_accounts").html(newMarkup);

        } else
            $("#master_store_switch").hide();
    }).catch(function(err) {
        $("#master_store_switch").hide();
    }).then(function() {

    });
}

function RequestActivation(sid) {
    axiosGet("/services/User.svc/RequestActivation?storeId=" + sid).then(function(data) {
        $(".modal_switch_accounts, .modal_switch_accounts_verify_error").hide();
        $(".modal_switch_accounts_verify_success").show();
        $(".modal_switch_accounts_verify").fadeIn();
    }).catch(function(err) {
        formatErrorMessageAxios(err);

        $(".modal_switch_accounts, .modal_switch_accounts_verify_success").hide();
        $(".modal_switch_accounts_verify_error").show();
        $(".modal_switch_accounts_verify").fadeIn();
    }).then(function() {

    });
}

function switchStore(sid) {
    trace('switchUser: sid:' + sid);

    $(".alert_switch_accounts").hide();

    $(".switchStoreButton").addClass("button_disabled");
    $(".switchStoreButton[data-id='" + sid + "']").html("<i class='fa fa-spinner fa-spin'></i> Loading");

    var url = "/services/User.svc/SwitchStore";
    var data = JSON.stringify({
        sid: sid
    });
    axiosPost(url, data).then(function(res) {
        var newRidgeToken = res.d;

        
        if (newRidgeToken === "Legacy") {
            window.location = "https://admin.freewebstore.org/Login.aspx?switchuser=1";
            return;
        }
        window.location.href = "/";
       //location.reload();
    }).catch(function (err) {
        $(".alert_switch_accounts[data-id='" + sid + "']").show();
        $(".switchStoreButton").removeClass("button_disabled");
        $(".switchStoreButton[data-id='" + sid + "']").html("Switch");
                if (err.Message === "Unauthorized") return location = '/logout.aspx';
    });
}

function getGEO(_ip, callback)
{
    $.ajax({
        url: 'https://api.ipstack.com/check?access_key=6c5572b3082fc7efb169b3b68c569ae0',
        cache: false,
        dataType: 'json',
        success: function (data) {
            callback(data, null);
        },
        error: function (error) {
            callback(null, error);
        },
        complete: function (status) {
        }
    });
}

function SubmitSupportTicket(ticket) {

    trace('SubmitSupportTicket');
    $(".modal_overlay, .modal").fadeOut();
    $(".sending_process2, .sending_process1_sending1, .sending_process1_failed1").hide();
    $(".sending_modal, .sending_process1").fadeIn();

    //Save to the server
    var url = "/services/support/Support.svc/CreateTicket";
    var data = JSON.stringify({ 'shopkeeper': ticket.storeId, 'ticket': ticket });
	axiosPost(url, data).then(function (res) {
		        if (res.d == true) {
	        $(".sending_process_main").hide();
	        $(".sending_process1_sending1").fadeIn();
        } else {
	        $(".sending_process_main").hide();
	        $(".sending_process1_failed1").fadeIn();
        }
        setTimeout(function() {
	        $(".sending_modal").fadeOut();
        }, 6000);
	    //reset the form
		$("#modal_help_wizard_contact_subject").val("");
		$("#modal_help_wizard_contact_message").val("");
    }).catch(function(err) {
        $(".sending_process_main").hide();
        $(".sending_process1_failed1").fadeIn();
    });
}

function JwitRandomIDGenerator() {
    RAND = function () {
        return Math.floor(Math.random() * 10).toString();
    };
    R2 = function () {
        return parseInt(RAND() + RAND());
    };
    var l = 7;
    var chars = '0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM';
    var str = '';
    for (i = 0; i < l; i++) {
        str += chars[R2()] || chars[R2()] || chars[R2()] || chars[R2()] || chars[R2()] || chars[0];
    }

    return str;
}

function CleanImageName(name) {
    var ext = name.substr(name.lastIndexOf('.') + 1);

        name = name.replace("." + ext, "");

    //trim whitespace
    name = name.trim();
    //Remove spaces and replace with hyphens
    name = name.replace(/ /g, '-');
    //Remove non alphanumeric chars
    name = name.replace(/[^A-za-z 0-9 \-]*/g, '');
    //Remove the ^ chars that are allowed in the above for some reason
    name = name.replace(/[\^]*/g, '');
    //Lowercase
    name = name.toLowerCase();
    //Remove double (or more) hyphens
    name = name.replace(/\-{1,}/g, '-');
    //Don't allow to end with a hyphen
    name = name.replace(/\-$/g, '');
    //Don't allow to start with a hyphen
    name = name.replace(/^\-/g, '');

    
    return name + "." + ext;
}

function getProduct(storeId, productId, callback) {
    trace('getProduct('+storeId+','+productId+')');
    axiosGet("/services/manage/products/edit.svc/GetProduct?storeId=" + storeId + "&productId=" + productId).then(
        function(data) {
            var product = data.d;
            callback(product);
        }).catch(function(err) {
        formatErrorMessageAxios(err.Message);
    }).then(function() {

    });
}

function getOrder(storeId, orderId, callback) {
    axiosGet("/services/Orders.svc/getOrder?storeId=" + storeId + "&orderId=" + orderId).then(function(data) {
        var order = data.d;
        callback(order);
    }).catch(function(err) {
        formatErrorMessageAxios(err.Message);
    });
}

function supportSigning(shopkeeper, fileName, contentType, type, callback) {
    var requestJSON = {
        shopkeeper: shopkeeper,
        fileName: fileName,
        contentType: contentType
    };
    /*Send the request*/

    axiosGet('/services/support/Support.svc/GetsignedURL?shopkeeper=' + shopkeeper + "&fileName=" + fileName).then(function(data) {
        callback(data.d);
    }).catch(function(err) {

    }).then(function() {

    });
}
function manualSigningAttachments(shopkeeper, fileName, threadID, messageID, contentType, type, callback) {
    var requestJSON = {
        shopkeeper: shopkeeper,
        fileName: fileName,
        contentType: contentType
    };
    /*Send the request*/
    axiosGet('/services/support/ticket.svc/GetsignedURL?shopkeeper=' + shopkeeper + "&fileName=" + fileName + "&threadID=" + threadID + "&messageID=" + messageID).then(function(data) {
        callback(data.d);
    }).catch(function(err) {

    }).then(function() {

    });
}

function manualSigningAttachmentsv2(shopkeeper, fileName, guid, contentType, type, callback) {
	var requestJSON = {
		shopkeeper: shopkeeper,
		fileName: fileName,
		contentType: contentType
	};
	/*Send the request*/
	axiosGet('/services/support/ticket.svc/GetsignedURLv2?shopkeeper=' + shopkeeper + "&fileName=" + fileName + "&guid=" + guid).then(function(data) {
		callback(data.d);
	}).catch(function(err) {

	}).then(function() {

	});
}

function manualSigning(shopkeeper, fileName, contentType, type, callback) {
    /*Need to send shopkeeper, fileName and contentType - all can be provided by DropzoneJS.
    A sanitized filename will be returned - this is the filename it's uploaded as*/

    var requestJSON = {
        shopkeeper: shopkeeper,
        fileName: fileName,
        contentType: contentType
    };
    /*Send the request*/

    axiosGet('/services/marketing/coupons.svc/GetsignedURL?shopkeeper=' + shopkeeper + "&fileName=" + fileName).then(function(data) {
        callback(data.d);
    }).catch(function(err) {

    }).then(function() {

    });
}
function manualSigningProducts(shopkeeper, fileName, contentType, type, callback) {
    axiosGet('/services/manage/products/import.svc/GetsignedURL?shopkeeper=' + shopkeeper + "&fileName=" + fileName).then(function(data) {
        callback(data.d);
    }).catch(function(err) {

    }).then(function() {

    });
}
//Used for AWS S3 image uploads
/*Request a signed S3 URL we can post to*/
function getSignedUrl(shopkeeper, fileName, contentType, type, callback) {
    /*Need to send shopkeeper, fileName and contentType - all can be provided by DropzoneJS.
    A sanitized filename will be returned - this is the filename it's uploaded as*/
 
    var requestJSON = {
        shopkeeper: shopkeeper,
        fileName: fileName,
        contentType: contentType,
        type: type
    };
    var url = 'https://2iiejpzs1a.execute-api.eu-west-1.amazonaws.com/v1/geturl';
    var data = JSON.stringify(requestJSON);
    /*Send the request*/
    axiosPost(url, data).then(function(res) {
        if (callback) callback(res);
    }).catch(function(err) {
                if (err.Message === "Unauthorized") return location = '/logout.aspx';
    });
}

function cleanProdImageName(name) {
    var ext = name.split('.').pop();
    name = name.split('.' + ext)[0];
    name = name.trim();
    name = name.replace(/\s/g, '-');
    name = name.replace(/[^A-za-z 0-9 -]*/g, '');
    name = name.replace(/(^)*/g, '');
    name = name.replace(/-{1,}/g, '');
    name = name.replace(/-$/g, '');
    name = name.replace(/^-/g, '');
    name = name.toLowerCase();
    return name + "." + ext;
}

function checkImageExists(name, cb) {
    axiosGet("/services/image/service.svc/imageExists?storeId=" + storeId + "&filename=" + name).then(function (data) {
        var response = data.d;
        cb(response);
    }).catch(function (err) {
        typeof beaver !== "undefined" ? beaver.error(JSON.stringify(err)) : console.error(err);
        cb(name);
    });
}

function getSignedUrlPdf(shopkeeper, fileName, contentType, callback) {
    /*Send the request*/
    axiosGet('/services/Images.svc/GetsignedURLPdf?shopkeeper=' + shopkeeper + "&fileName=" + fileName + "&contentType=" + contentType).then(function (data) {
        callback(data.d);
    }).catch(function (err) {
    });
}

// Get Correct Currency
function getCorrectCurrency() {

    return new Promise(function(resolve, reject) {

        if (storeCurrency != "null") {
            if (storeCurrency === "GBP") {
                appPriceCurrency = "GBP";
            } else if (storeCurrency === "EUR") {
                appPriceCurrency = "EUR";
            } else {
                appPriceCurrency = "USD";
            }
        } else {
            appPriceCurrency = "USD";
        }


        axiosGet('/services/billing/billing.svc/GetActiveSubscription?storeId=' + storeId).then(function(data) {
            hasSubscription = data;
            hasSubscription = JSON.parse(hasSubscription);
            
            if (hasSubscription.status === 1) {
                var packageId = hasSubscription.packageId;

                var currenctSubscriptionCurrency = null;
                if (hasSubscription.sub_cancel_date == null) {
                    if (hasSubscription.next_payment_due != null) {
                        if (hasSubscription.next_payment_due.amount != null) {
                            currenctSubscriptionCurrency = hasSubscription.next_payment_due.amount.currency;
                        }
                    }
                }

                var listPackagesUrl = '/services/billing/billingv2.svc/ListPackagesV2?storeId=' + storeId + '&currentSubcurrency=' + currenctSubscriptionCurrency;
                /*if (controlPanelVersion == 2) {
                    listPackagesUrl = '/services/billing/billingv2.svc/ListPackages';
                }*/

                axiosGet(listPackagesUrl).then(function(data) {
                    listPackages = data.d || data;
                    listPackages = JSON.parse(listPackages);
                                        $.each(listPackages, function() {
                        if (this.id == packageId) {
                            myPackage = this;
                                                    }
                    });

                    if (typeof myPackage !== "undefined") {

                        activeSubCurrency = myPackage.currency;
                        if (activeSubCurrency === "GBP") {
                            appPriceCurrency = "GBP";
                        } else if (activeSubCurrency === "EUR") {
                            appPriceCurrency = "EUR"
                        } else {
                            appPriceCurrency = "USD"
                        }
                    } else {
                        resolve({ "currency": appPriceCurrency, "subscription": false, "packageType": 0, "isAnnual": null });
                    }
                }).catch(function(err) {
                                        if (err.Message == "Unauthorized") {
                        location = "logout.aspx";
                    }
                }).then(function() {
                                        if (typeof myPackage !== "undefined") {
                        resolve({
                            "currency": appPriceCurrency,
                            "subscription": true,
                            "packageType": myPackage.packageTypeId,
                            "isAnnual": myPackage.isAnnual
                        });
                    } else {
                        resolve({ "currency": appPriceCurrency, "subscription": false, "packageType": 0, "isAnnual": null });
                    }
                });
            } else {
                resolve({ "currency": appPriceCurrency, "subscription": false, "packageType": 0, "isAnnual": null });
            }
        }).catch(function(err) {
                        if (err.Message == "Unauthorized") {
                location = "logout.aspx";
            }
        })
    });
}

function giveAchievement(AchievementId) {
    // Give achievement to user
    axiosGet('/services/account/Achievements.svc/giveAchievement?storeId=' + storeId + '&achievementId='+AchievementId).then(function(data) {

    }).catch(function(err) {

    }).then(function () {

        var urlPath = window.location.pathname.toLowerCase();
        if ((AchievementId == "ACHIEVEMENT_PREVIEW_STORE" || AchievementId == "ACHIEVEMENT_EDIT_STORENAME") && (urlPath == "/main.aspx" || urlPath == "/main" )) {
            checkUncollectedAchievements();
        }

    });
}

/*!
* jquery.addrule.js 0.0.2 - https://gist.github.com/yckart/5563717/
* Add css-rules to an existing stylesheet.
*
* @see http://stackoverflow.com/a/16507264/1250044
*
* Copyright (c) 2013 Yannick Albert (http://yckart.com)
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php).
* 2013/11/23
**/

(function ($) {

    window.addRule = function (selector, styles, sheet) {

        styles = (function (styles) {
            if (typeof styles === "string") return styles;
            var clone = "";
            for (var prop in styles) {
                if (styles.hasOwnProperty(prop)) {
                    var val = styles[prop];
                    prop = prop.replace(/([A-Z])/g, "-$1").toLowerCase(); // convert to dash-case
                    clone += prop + ":" + (prop === "content" ? '"' + val + '"' : val) + "; ";
                }
            }
            return clone;
        }(styles));
        sheet = sheet || document.styleSheets[document.styleSheets.length - 1];

        if (sheet.insertRule) sheet.insertRule(selector + " {" + styles + "}", sheet.cssRules.length);
        else if (sheet.addRule) sheet.addRule(selector, styles);

        return this;

    };

    if ($) $.fn.addRule = function (styles, sheet) {
        addRule(this.selector, styles, sheet);
        return this;
    };

}(this.jQuery || this.Zepto));


function divFadeIn() {
    for (var i = 0; i < arguments.length; i++) {
	    $(arguments[i]).fadeIn();
    }
    document.querySelector("body").classList.add("body_modal_is_open");
}


function fadeOut(el){
	try {
		el.style.opacity = 1;

		(function fade() {
			if ((el.style.opacity -= .1) < 0) {
				el.style.display = "none";
			} else {
				requestAnimationFrame(fade);
			}
		})();
	} catch (Er) {}
};

function fadeIn(el, display) {
	try {
		el.style.opacity = 0;
		el.style.display = display || "block";

		(function fade() {
			var val = parseFloat(el.style.opacity);
			if (!((val += .1) > 1)) {
				el.style.opacity = val;
				requestAnimationFrame(fade);
			}
		})();
	} catch (Er) {}
};

function fadeInClass() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.getElementsByClassName(arguments[i])[0] != undefined) {
			try {
			var item = document.getElementsByClassName(arguments[i])[0];
			fadeIn(item);
			} catch (Er) {}
		}
	}
}

function fadeInId() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.getElementById(arguments[i]) != undefined) {
			try {
			var item = document.getElementById(arguments[i]);
			fadeIn(item);
			} catch (Er) {}
		}
	}
}

function fadeOutClass() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.getElementsByClassName(arguments[i])[0] != undefined) {
			try {
			var item = document.getElementsByClassName(arguments[i])[0];
			fadeOut(item);
			} catch (Er) {}
		}
	}
}

function hideAllByClass() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.querySelectorAll(arguments[i]) != undefined) {
            var items = document.querySelectorAll(arguments[i]);
            for (var it = 0; it < items.length; it++) {
                try {
                    items[it].style.display = 'none';
                } catch (Er) { }
            }
		}
	}
}

function showAllByClass() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.querySelectorAll(arguments[i]) != undefined) {
            var items = document.querySelectorAll(arguments[i]);
            items = [].slice.call(items);
            for (var e = 0; e < items.length; e++) {
                items[e].style.display = 'block';
            }
			
		}
	}
}


function hideByClass() {
    for (var i = 0; i < arguments.length; i++) {
        if (document.getElementsByClassName(arguments[i])[0] != undefined) {
			try {
            document.getElementsByClassName(arguments[i])[0].style.display = "none";
			} catch (Er) {}
        }
    }
}

function hideElem() {
    for (var i = 0; i < arguments.length; i++) {
		try {
		document.querySelector(arguments[i]).style.display = "none";
		} catch (Er) {}
    }
}

function showElem() {
    for (var i = 0; i < arguments.length; i++) {
		try {
		document.querySelector(arguments[i]).style.display = "block";
		} catch (Er) {}
    }
}

function showElemInline() {
    for (var i = 0; i < arguments.length; i++) {
		try {
		document.querySelector(arguments[i]).style.display = "inline-block";
		} catch (Er) {}
    }
}

function removeByClass() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.getElementsByClassName(arguments[i])[0] != undefined) {
			try {
			document.getElementsByClassName(arguments[i])[0].parentNode.removeChild(document.getElementsByClassName(arguments[i])[0]);
			} catch (Er) {}
		}
	}
}

function removeByQuerySelector() {
    for (var i = 0; i < arguments.length; i++) {
        if (document.querySelectorAll(arguments[i]) != undefined) {
            var items = document.querySelectorAll(arguments[i]);
            for (var i = 0; i < items.length; i++) {
				try {
                items[i].parentNode.removeChild(items[i]);
				} catch (Er) {}
            }
        }
    }
}

function removeById() {
	for (var i = 0; i < arguments.length; i++) {
		if (document.getElementById(arguments[i]) != undefined) {
			var item = document.getElementById(arguments[i]);
			try {
			item.parentNode.removeChild(item);
			} catch (Er) {}
		}
	}
}

function getAttrByClass(el, attr) {
	try {
	return document.getElementsByClassName(el)[0].getAttribute(attr);
	} catch (Er) {}
}

function getAttrById(el, attr) {
	try {
	return document.getElementById(el).getAttribute(attr);
	} catch (Er) {}
}

function setAttrByClass(el, attr, val) {
	try {
	return document.getElementsByClassName(el)[0].setAttribute(attr, val);
	} catch (Er) {}
}

function setAttrById(el, attr, val) {
	try {
	return document.getElementById(el).setAttribute(attr, val);
	} catch (Er) {}
}

function setAttrByQuery(el, attr, val) {
	if (document.querySelectorAll(el) != undefined) {
        var items = document.querySelectorAll(el);
        for (var i = 0; i < items.length; i++) {
			try {
            items[i].setAttribute(attr, val);
			} catch (Er) {}
        }
    }
}

function hideById() {
    for (var i = 0; i < arguments.length; i++) {
		try {
        document.getElementById(arguments[i]).style.display = "none";
		} catch (Er) {}
    }
}

function hideByQuery() {
	for (var i = 0; i < arguments.length; i++) {
		try {
		document.querySelector(arguments[i]).style.display = "none";
		} catch (Er) {}
	}
}

function hideByQueryAll() {
    for (var i = 0; i < arguments.length; i++) {
        var items = document.querySelectorAll(arguments[i]);
        for (var it = 0; it < items.length; it++) {
			try {
            items[it].style.display = "none";
			} catch (Er) {}
        }
    }
}

function updateTextById(text) {
	for (var i = 0; i < arguments.length; i++) {
		try {
			document.getElementById(arguments[i]).innerText = text;
		} catch (Er) {}
    }
}

function updateHtmlById(text) {
	for (var i = 0; i < arguments.length; i++) {
		try {
			document.getElementById(arguments[i]).innerText = text;
		} catch (Er) {}
    }
}

function showById() {
    for (var i = 0; i < arguments.length; i++) {
		try {
        document.getElementById(arguments[i]).style.display = "block";
		} catch (Er) {}
    }
}

function showByIdTable() {
    for (var i = 0; i < arguments.length; i++) {
		try {
        document.getElementById(arguments[i]).style.display = "table";
		} catch (Er) {}
    }
}

function showByIdInline() {
    for (var i = 0; i < arguments.length; i++) {
		try {
        document.getElementById(arguments[i]).style.display = "inline-block";
		} catch (Er) {}
    }
}

function showByIdFlex() {
    for (var i = 0; i < arguments.length; i++) {
        try {
            document.getElementById(arguments[i]).style.display = "flex";
        } catch (Er) { }
    }
}

function showByClass() {
    for (var i = 0; i < arguments.length; i++) {
		try {
        document.getElementsByClassName(arguments[i])[0].style.display = "block";
		} catch (Er) {}
    }
}

function showByClassInline() {
    for (var i = 0; i < arguments.length; i++) {
        var items = document.querySelectorAll("." + arguments[i]);
        for (var it = 0; it < items.length; it++) {
            try {
                items[it].style.display = "inline-block";
            } catch (Er) { }
        }
    }

}

function getId(id) { 
	try {
		return document.getElementById(id);
	} catch (er) {}
}

function getClass(el) { 
	try {
	return document.getElementsByClassName(el)[0];
	} catch (Er) {}
}

function multipleEventHandler(el, event, fn) {
    var items = document.querySelectorAll(el);
    items = [].slice.call(items);
	items.forEach(function(item) {
		events = event.trim().split(' ');
		events.forEach(function(e) {
			item.addEventListener(e, fn);
		});
	});
}

function animate(elem, style, unit, from, to, time, prop) {
	if (!elem) return;
		var start = new Date().getTime(),
		timer = setInterval(function () {
			var step = Math.min(1, (new Date().getTime() - start) / time);
			if (prop) {
				elem[style] = (from + step * (to - from))+unit;
			} else {
				elem.style[style] = (from + step * (to - from))+unit;
			}
			if (step === 1) {
				clearInterval(timer);
			}
		}, 25);
	if (prop) {
		elem[style] = from+unit;
	} else {
		elem.style[style] = from+unit;
	}
}

function elem_matches(el, selector) {
	return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);
};

Element.prototype.is = function (match) {
    // match is string selector or an element or an array or elements
    if (match.nodeType) {
        return this === match;
    }

    var qa = (typeof (match) === 'string' ? document.querySelectorAll(match) : match),
        length = qa.length,
        returnArr = [];

    while (length--) {
        if (qa[length] === this) {
            return true;
        }
    }
    return false;
}

function slideUp(target, duration) {
	duration = duration || 500;
	target.style.transitionProperty = 'height, margin, padding';
	target.style.transitionDuration = duration + 'ms';
	target.style.boxSizing = 'border-box';
	target.style.height = target.offsetHeight + 'px';
	target.offsetHeight;
	target.style.overflow = 'hidden';
	target.style.height = 0;
	target.style.paddingTop = 0;
	target.style.paddingBottom = 0;
	target.style.marginTop = 0;
	target.style.marginBottom = 0;
	window.setTimeout(function() {
		target.style.display = 'none';
		target.style.removeProperty('height');
		target.style.removeProperty('padding-top');
		target.style.removeProperty('padding-bottom');
		target.style.removeProperty('margin-top');
		target.style.removeProperty('margin-bottom');
		target.style.removeProperty('overflow');
		target.style.removeProperty('transition-duration');
		target.style.removeProperty('transition-property');
	}, duration);
}

function slideDown(target, duration) {
	duration = duration || 500;
    target.style.removeProperty('display');
    var display = window.getComputedStyle(target).display;
    if (display === 'none') display = 'block';
    target.style.display = display;
    var height = target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.boxSizing = 'border-box';
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = duration + 'ms';
    target.style.height = height + 'px';
    target.style.removeProperty('padding-top');
    target.style.removeProperty('padding-bottom');
    target.style.removeProperty('margin-top');
    target.style.removeProperty('margin-bottom');
    window.setTimeout( function() {
      target.style.removeProperty('height');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
    }, duration);
}

function ToggleSlide(target, duration) {
	duration = duration || 500;
	if (window.getComputedStyle(target).display === 'none') {
		return slideDown(target, duration);
	} else {
		return slideUp(target, duration);
	}
}

function insertAfterEl(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}

function ready(fn) {
    if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
        fn();
    } else {
        document.addEventListener('DOMContentLoaded', fn);
    }
}

function whitelistInputs() {
	var inputs = document.querySelectorAll("body input");
	inputs = [].slice.call(inputs);
	inputs.forEach(function(input) { 
		input.setAttribute('data-hj-whitelist', '');
	});
}



/* Save Functionality */

var save_changes_detected = false;
function saveChangesDetected() {

    if (save_changes_detected) {
        $(".main_save_button").removeClass("button_disabled has_tool_tip").addClass("main_save_button_active");
    } else {
        $(".main_save_button").addClass("button_disabled has_tool_tip").removeClass("main_save_button_active");
    }

}

function runSaveButton() {
    if (save_changes_detected) {
        runSavePageLocal();
    }
}

var multipleComplete = 0;
function runFinalSave(returningPageName, returningPageLink, currentPageLink, saveType, saveUrl, noredirect, name, multiple, updateCurrentPageLink, noStay, ignore) {
	return new Promise(function (resolve, reject) {
		$(".save_process2, .save_process1_saved1").hide();
		$(".save_modal, .save_process1, .save_process_main").fadeIn();

		save_changes_detected = false;

		if (saveType == "post") {
			runFinalSavePost(returningPageName, returningPageLink, currentPageLink, saveUrl, noredirect, name, multiple, updateCurrentPageLink, noStay, ignore).then(function (win) {
				resolve(win);
			}).catch (function (err) {
				reject(err);
			});
		} else if (saveType == "get") {
			runFinalSaveGet(returningPageName, returningPageLink, currentPageLink, saveUrl, noredirect, name, multiple, updateCurrentPageLink, noStay, ignore);
		}
	});

}

function runFinalSavePost(returningPageName, returningPageLink, currentPageLink, saveUrl, noredirect, name, multiple, updateCurrentPageLink, noStay, ignore) {
	return new Promise(function (resolve, reject) {
		axiosPost(saveUrl[0], saveUrl[1]).then(function (data) {
			trace('runFinalSavePost:success');
			if (multiple != null) {
				multipleComplete++;
			}
			if (updateCurrentPageLink != null) {
				currentPageLink = currentPageLink + data.d;
			}
			closeFinalSave(returningPageName, returningPageLink, currentPageLink, noredirect, name, multiple, noStay, ignore);
			resolve("Done");
		}).catch(function (err) {
			trace(err);
			trace('runFinalSavePost:error');
			if (err.Message == "Unauthorized") {
				location = "logout.aspx";
            }

            productValidationErrorMessage(err);

			reject(err);
		}).then(function () {
			trace('runFinalSavePost:complete');
		});
	})
}

function runFinalSaveGet(returningPageName, returningPageLink, currentPageLink, saveUrl, noredirect, name, multiple, updateCurrentPageLink, noStay, ignore) {
	return new Promise(function (resolve, reject) {
    axiosGet(saveUrl).then(function (data) {
        trace('runFinalSaveGet:success');
        
        if (multiple != null) {
            multipleComplete++;
        }
        if (updateCurrentPageLink != null) {
            currentPageLink = currentPageLink + data.d;
        }
        closeFinalSave(returningPageName, returningPageLink, currentPageLink, noredirect, name, multiple, noStay, ignore);
		resolve("Done");
		}).catch(function (err) {
			trace('runFinalSaveGet:error');
        
			if (err.Message == "Unauthorized") {
				location = "logout.aspx";
			}
			return reject(err);
		}).then(function () {
			trace('runFinalSaveGet:complete');
        
		});
	})
}

function closeFinalSave(returningPageName, returningPageLink, currentPageLink, noredirect, name, multiple, noStay, ignore) {

    if (multiple != null) {
        if (multiple != multipleComplete) {
            return false;
        }
    }

    if (ignore != null) {
        if (ignore == true) {

            $(".save_process_main").hide();
            $(".save_process1_saved1").fadeIn();
            $(".saved_success_buttons").hide();
            setTimeout(function () {
                $(".save_modal, .save_process1").fadeOut();
            }, 2000);
            return false;
        }
    }

    $(".main_save_button").addClass("button_disabled has_tool_tip");
    $(".save_process_main").hide();
    $(".saved_success_return_text").text(returningPageName);
    $("#save_success_return_button").attr("href", returningPageLink);
    if (noredirect != null && noredirect == 1) {
        $("#save_success_stay_button").on("click", function () {
            document.getElementsByClassName('save_modal')[0].style.display = "none";
            window[name]();
        });
    }

    if (currentPageLink.includes("tour=")) {
        var tourInParam = currentPageLink.indexOf('tour=');
        currentPageLink = currentPageLink.substring(0, tourInParam != -1 ? tourInParam : currentPageLink.length);
    }

    if (noredirect == null || noredirect == undefined) $("#save_success_stay_button").attr("href", currentPageLink);

    $(".save_process1_saved1").fadeIn();
    if (noStay != null) {
        if (noStay == true) {
            $("#save_success_stay_button").hide();
        }
    } else {
        var saveTimerNumber = 5;
        var interval = setInterval(function () {
            saveTimerNumber--;
            $('.saved_success_return_number').text(saveTimerNumber);
            if (saveTimerNumber === 0) {
                clearInterval(interval);
                if (noredirect != null && noredirect == 1) {
                    document.getElementsByClassName('save_modal')[0].style.display = "none";
                    window[name]();
                }
                if (noredirect == null || noredirect == undefined) location.href = currentPageLink;
            }
        }, 1000);

        $("#save_success_return_button, #save_success_stay_button").click(function () {
            clearInterval(interval);
        });
    }
    
}



var tourInstruction = [
    {
        "id": "mobile_menu_button",
        "position": "nav-menu-mobile-button",
        "tourTitle": "",
        "instructions": [
            "Click the <strong><i class='fa fa-bars'></i></strong> button to open the menu",
        ],
        "arrow": "up-left",
        "urlParam": ""
    },
    {
        "id": "save_the_page",
        "position": "save-the-page",
        "tourTitle": "Save Your Changes",
        "instructions": [
            "When you are finished with your changes you can save the changes here."
        ],
        "arrow": "up-right",
        "urlParam": "",
        "opaque": true,
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_EDIT_DESIGN",
        "position": "nav-menu-design",
        "tourTitle": "Customize Design",
        "instructions": [
            "Click the <strong>Design</strong> button.",
            "This will take you to the design menu."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_EDIT_DESIGN2",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_EDIT_DESIGN2",
        "position": "nav-menu-themeeditor",
        "tourTitle": "Customize Design",
        "instructions": [
            "Click the <strong>Theme Editor</strong> button.",
            "This will take you to the Theme Editor."
        ],
        "arrow": "top-left",
        "urlParam": "",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_EDIT_HOMEPAGE",
        "position": "nav-menu-manage",
        "tourTitle": "Personalize Homepage",
        "instructions": [
            "Click the <strong>Manage</strong> item.",
            "This will dropdown the manage navigation."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_EDIT_HOMEPAGE2",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_EDIT_HOMEPAGE2",
        "position": "nav-menu-pages",
        "position2": "nav-menu-pages2",
        "tourTitle": "Personalize Homepage",
        "instructions": [
            "Click the <strong>Pages</strong> item.",
            "This will take you to the Pages section."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_EDIT_HOMEPAGE3",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_EDIT_HOMEPAGE3",
        "position": "pages-edit-homepage",
        "tourTitle": "Personalize Homepage",
        "instructions": [
            "Click the <i class='fa fa-pencil'></i> button.",
            "You will then be able to edit your Homepage."
        ],
        "arrow": "top-left",
        "urlParam": "",
        "opaque": true,
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_EDIT_HOMEPAGE4",
        "position": "pages-edit-homepage-edit1",
        "tourTitle": "Personalize Homepage",
        "instructions": [
            "This is the name of your page. It will appear in your page navigation.",
        ],
        "arrow": "top-left",
        "urlParam": "",
        "next": "ACHIEVEMENT_EDIT_HOMEPAGE5",
        "opaque": true,
        "opaqueName": "1",
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_EDIT_HOMEPAGE5",
        "position": "pages-edit-homepage-edit2",
        "tourTitle": "Personalize Homepage",
        "instructions": [
            "This is the page content. Add text, images, videos and more.",
        ],
        "arrow": "top-left",
        "urlParam": "",
        "previous": "ACHIEVEMENT_EDIT_HOMEPAGE4",
        "next": "save_the_page",
        "opaque": true,
        "opaqueName": "2",
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_ADD_PRODUCT",
        "position": "nav-menu-manage",
        "tourTitle": "Add a Product",
        "instructions": [
            "Click the <strong>Manage</strong> button.",
            "This will take you to the manage menu."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_ADD_PRODUCT2",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_ADD_PRODUCT2",
        "position": "nav-menu-products",
        "position2": "nav-menu-products2",
        "tourTitle": "Add a Product",
        "instructions": [
            "Click the <strong>Products</strong> button.",
            "This will take you to the products menu."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_ADD_PRODUCT3",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_ADD_PRODUCT3",
        "position": "nav-menu-addproducts",
        "tourTitle": "Add a Product",
        "instructions": [
            "Click the <strong>Add a Product</strong> button.",
            "You will then be able to add a product."
        ],
        "arrow": "top-left",
        "urlParam": "",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_ADD_GATEWAY",
        "position": "nav-menu-orders",
        "tourTitle": "Check Payment Methods",
        "instructions": [
            "Click the <strong>Orders</strong> button.",
            "This will take you to the orders menu."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_ADD_GATEWAY2",
        "isNav": true
    },
    {
        "id": "ACHIEVEMENT_ADD_GATEWAY2",
        "position": "nav-menu-checkouts",
        "position2": "nav-menu-checkouts2",
        "tourTitle": "Check Payment Methods",
        "instructions": [
            "Click the <strong>Checkouts</strong> button.",
            "This will take you to the checkouts section."
        ],
        "arrow": "top-left",
        "urlParam": "ACHIEVEMENT_ADD_GATEWAY3",
        "isNav": true
    },
    /*{
        "id": "ACHIEVEMENT_ADD_GATEWAY3",
        "position": "modal",
        "tourTitle": "Check Payment Methods",
        "instructions": [],
        "function": "achievementCheckPaymentGateways();",
        "arrow": "",
        "urlParam": "",
        "isNav": false
    },*/
    {
        "id": "ACHIEVEMENT_ADD_GATEWAY3",
        "position": "nav-menu-checkouts-stripe",
        "tourTitle": "Check Payment Methods",
        "instructions": [
            "Setup your free checkout using Stripe, a reliable, secure and fast checkout."
        ],
        "arrow": "top-left",
        "urlParam": "",
        "next": "",
        "opaque": true,
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_ADD_GATEWAY5",
        "position": "nav-menu-add-new-checkout",
        "tourTitle": "Check Payment Methods",
        "instructions": [
            "You can add new checkouts by clicking the <strong>Add New Checkout</strong> button."
        ],
        "arrow": "top-left",
        "urlParam": "",
        "next": "",
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_PREVIEW_STORE",
        "position": "nav-menu-preview",
        "tourTitle": "Preview Your Store",
        "instructions": [
            "Click the <strong>Hey, YOUR NAME</strong> button."
        ],
        "arrow": "up-right",
        "urlParam": "",
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_PREVIEW_STORE2",
        "position": "nav-menu-preview2",
        "tourTitle": "Preview Your Store",
        "instructions": [
            "Click the <strong>Preview Store</strong> <i class='fa fa-external-link'></i> button."
        ],
        "arrow": "up-right",
        "urlParam": "",
        "isNav": false
    },
    {
        "id": "ACHIEVEMENT_VIEW_FREE_APPS",
        "position": "nav-menu-apps",
        "tourTitle": "View App Center",
        "instructions": [
            "Click the <strong>App Center</strong> button.",
            "This will take you to the App Center."
        ],
        "arrow": "top-left",
        "urlParam": "",
        "isNav": true
    }
];

var tourIsLive = false;
var tourIsLiveId = "";
var setupTourNextId = "";
var tourPosition;

function setupTourNext() {
        setTimeout(function () {
        setupTour(setupTourNextId);
    }, 500);
}

function setupTour(tourId) {

        tourIsLive = true;

    hideByClass("modal_getting_started", "modal_overlay");
    document.querySelector("body").classList.remove("body_modal_is_open");

    if (tourId == null || tourId == undefined || tourId.length == 0) {
        tourIsLive = false;
		return;
    }

    setTimeout(function () {

        // Get Correct Tour obj
        var tour = tourInstruction.filter(function (obj) {
            return obj.id === tourId;
        });
        tour = tour[0];

        if (tour.position == "modal") {
            modalTour(tour);
            return false;
        }

        if (tour.id == "ACHIEVEMENT_PREVIEW_STORE") {
            tourIsLiveId = tour.id;
            setupTourNextId = "ACHIEVEMENT_PREVIEW_STORE2";
        } else if (tour.id != "mobile_menu_button") {
            tourIsLiveId = tour.id;
            setupTourNextId = tour.id;
        }

        var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        // Check to see if user needs to click mobile menu first
        if (tour.isNav != null) {
            if (tour.isNav == true) {
                var navPosition = $("nav").css("left");
                if (viewportWidth < 900 && navPosition != "0px") {
                    setupTourNextId = tour.id;
                    $("[data-tourid='nav-menu-mobile-button']").attr("onclick", "setupTourNext();")
                    setupTour("mobile_menu_button");
                    return false;
                }
            }
        }

        // Get position of where the instructions will be displayed
        tourPosition = document.querySelector("[data-tourid='" + tour.position + "']");
        var tourPositionRect = tourPosition.getBoundingClientRect();
        
        var tourPositionTop = tourPositionRect.top;
        var touPositionBottom = tourPositionRect.bottom;
        var touPositionHeight = tourPositionRect.height;
        var tourPositionLeft = tourPositionRect.width + tourPositionRect.left;
        var tourPositionRight = tourPositionRect.right;

        tourPositionLeft = tourPositionLeft + 15;
        touPositionHeight = touPositionHeight + 15;

        if (tour.id != "mobile_menu_button" && tour.id != "save_the_page" && tour.isNav != true) {
            var hasScrollTop = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop;
            $("html, body").animate({ scrollTop: (tourPositionTop + hasScrollTop - 150) });

            tourPositionTop = tourPositionTop + hasScrollTop;
                    } else {
            //$("html, body").animate({ scrollTop: (tourPositionTop - 150) });
            $("html, body").animate({ scrollTop: 0 });
        }
        

        // Build Tour Panel
        $(".tour_overlay").attr("data-tourStep", tour.id);

        if (tour.arrow == "top-left" && viewportWidth >= 550) {

            $(".tour_overlay").attr("data-arrow", "top-left");

            $(".tour_overlay").animate({
                opacity: 1,
                top: tourPositionTop + 'px',
                left: tourPositionLeft + 'px'
            }, 400, function () {

            });

            $(".tour_overlay").css("right", "inherit");

        } else if (tour.arrow == "up-right") {

            $(".tour_overlay").attr("data-arrow", "up-right");

            if (tour.id == "ACHIEVEMENT_VIEW_FREE_APPS3") {
                $(".tour_overlay").animate({
                    opacity: 1,
                    top: (tourPositionTop + 40) + 'px',
                    left: (tourPositionLeft - 300) + 'px',
                }, 400, function () {

                });
            } else {
                $(".tour_overlay").animate({
                    opacity: 1,
                    top: (tourPositionTop + 60) + 'px',
                    right: '1px',
                    left: 'inherit'
                }, 400, function () {

                });
            }

            $(".tour_overlay").css("left", "inherit");

        } else if (tour.arrow == "up-left" || viewportWidth < 550) {

            $(".tour_overlay").attr("data-arrow", "up-left");
            if (tour.isNav == true || tour.id == "mobile_menu_button") {
                $(".tour_overlay").animate({
                    opacity: 1,
                    top: (tourPositionTop + 60) + 'px',
                    left: '1px',
                    right: 'inherit'
                }, 400, function () {

                });
            } else {
                $(".tour_overlay").animate({
                    opacity: 1,
                    top: (tourPositionTop + 60) + 'px',
                    left: '115px',
                    right: 'inherit'
                }, 400, function () {

                });
            }

            $(".tour_overlay").css("right", "inherit");

        }

                if (tour.tourTitle != null) {
            if (tour.tourTitle.length > 0) {
                $(".tour_title").text(tour.tourTitle);
            } else {
                var tourOther = tourInstruction.filter(function (obj) {
                    return obj.id === setupTourNextId;
                });
                tourOther = tourOther[0];
                $(".tour_title").text(tourOther.tourTitle);
            }
        } else {
            var tourOther = tourInstruction.filter(function (obj) {
                return obj.id === setupTourNextId;
            });
            tourOther = tourOther[0];
            $(".tour_title").text(tourOther.tourTitle);
        }


        var tourItemInstruction = "";
        for (var i = 0; i < tour.instructions.length; i++) {
            tourItemInstruction += '<div class="tour_body_text">' + tour.instructions[i] + '</div>';
        }
        $(".tour_body").html(tourItemInstruction);

        if (tour.urlParam != null) {
            if (tour.urlParam.length > 0) {
                var href = $("[data-tourid='" + tour.position + "']").attr("href");
                href = href.split("?");
                $("[data-tourid='" + tour.position + "']").attr("href", href[0] + "?tour=" + tour.urlParam);

                if (tour.position2 != null) {
                    if (tour.position2.length > 0) {
                        var href = $("[data-tourid='" + tour.position2 + "']").attr("href");
                        href = href.split("?");
                        $("[data-tourid='" + tour.position2 + "']").attr("href", href[0] + "?tour=" + tour.urlParam);
                    }
                }

            }
        }

        $(".tour_footer, .tour_footer_next, .tour_footer_previous").hide();

        if (tour.next != null && tour.next.length > 0) {
            $(".tour_footer, .tour_footer_next").show();
        }

        if (tour.previous != null && tour.previous.length > 0) {
            $(".tour_footer, .tour_footer_previous").show();
        }

        $("[data-touropaque]").removeClass("tour_active_opaque_name");

        if (tour.opaque != null) {
            if (tour.opaque == true) {
                $(".tour_active_opaque_panel").addClass("tour_active_opaque");

                if (tour.opaqueName != null) {
                    if (tour.opaqueName.length > 0) {
                        $("[data-touropaque='" + tour.opaqueName + "']").addClass("tour_active_opaque_name");
                    }
                }

                if (tour.id == "save_the_page") {
                    $(".tour_active_opaque_panel").addClass("tour_active_opaque");
                    $("[data-touropaque]").addClass("tour_active_opaque_name");
                }

            }
        }

    }, 500);
}

function nextTour() {

    var tour = tourInstruction.filter(function (obj) {
        return obj.id === tourIsLiveId;
    });
    tour = tour[0];

    newTourId = tour.next;

    setupTour(newTourId);

}

function previousTour() {

    var tour = tourInstruction.filter(function (obj) {
        return obj.id === tourIsLiveId;
    });
    tour = tour[0];

    newTourId = tour.previous;

    setupTour(newTourId);

}


function closeTour() {

    tourIsLive = false;

    $(".tour_overlay").animate({
        opacity: 1,
        top: '-500px',
        left: '240px'
    }, 400, function () {

    });

    var tourClose = tourInstruction.filter(function (obj) {
        return obj.id === tourIsLiveId;
    });
    tourClose = tourClose[0];

    if (tourClose.urlParam != null) {
        if (tourClose.urlParam.length > 0) {
            var href = $("[data-tourid='" + tourClose.position + "']").attr("href");
            href = href.split("?");
            $("[data-tourid='" + tourClose.position + "']").attr("href", href[0]);
        }
    }

    $(".tour_active_opaque_panel").removeClass("tour_active_opaque");
    $("[data-touropaque]").removeClass("tour_active_opaque_name");
}



function inputHelpText(el) {
    $(".input_help_text[data-help='" + el + "']").slideToggle();
}


function decodeURIComponentSafe(uri, mod) {
    var out = new String(),
        arr,
        i = 0,
        l,
        x;
    typeof mod === "undefined" ? mod = 0 : 0;
    arr = uri.split(/(%(?:d0|d1)%.{2})/);
    for (l = arr.length; i < l; i++) {
        try {
            x = decodeURIComponent(arr[i]);
        } catch (e) {
            x = mod ? arr[i].replace(/%(?!\d+)/g, '%25') : arr[i];
        }
        out += x;
    }
    return out;
}


function groupBy(list, keyGetter) {
    var map = new Map();
    list.forEach(function(item) {
        var key = keyGetter(item);
        var collection = map.get(key);
        if (!collection) {
            map.set(key, [item]);
        } else {
            collection.push(item);
        }
    });
    return map;
}


/* User Timeout */

/*function debounceUserTimeout(callbackUserTimeout, timeoutUserTimeout, _this) {
    var timerUserTimeout;
    return function (e) {
        var _that = this;
        if (timerUserTimeout)
            clearTimeout(timerUserTimeout);
        timerUserTimeout = setTimeout(function () {
            callbackUserTimeout.call(_this || _that, e);
        }, timeoutUserTimeout);
    }
}

var userActionUserTimeoutInterval;
var userActionUserTimeoutVisible = false;

var userActionUserTimeout = debounceUserTimeout(function (e) {

    if (userActionUserTimeoutVisible == false) {
        userActionUserTimeoutVisible = true;
        clearInterval(userActionUserTimeoutInterval);
        divFadeIn("#session_expires_overlay, #session_expires_modal");

        var fiveMinutes = 60 * 5,
        display = document.querySelector('#session_expires_modal_timer');
        userActionUserTimeoutTimer(fiveMinutes, display);
    }

}, 3300000);

function userActionUserTimeoutTimer(duration, display) {
    var timer = duration, minutes, seconds;
    userActionUserTimeoutInterval = setInterval(function () {
        minutes = parseInt(timer / 60, 10)
        seconds = parseInt(timer % 60, 10);

        if (minutes < 1) {
            document.getElementById("session_expires_modal_timer").classList.add("session_expires_modal_timer_nearly");
        }

        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;

        if (display != null) {
            display.textContent = minutes + ":" + seconds;
        } else {
                        runLogout();
        }

        if (--timer < 0) {
            clearInterval(userActionUserTimeoutInterval);
            runLogout();
        }
    }, 1000);
}

function userActionUserTimeoutContinue() {
    userActionUserTimeoutVisible = false;
    document.getElementById("session_expires_modal_timer").classList.remove("session_expires_modal_timer_nearly");
    clearInterval(userActionUserTimeoutInterval);
    $("#session_expires_modal_timer").html("05:00");
    $("#session_expires_overlay, #session_expires_modal").hide();

}

document.addEventListener("mousemove", userActionUserTimeout, false);
document.addEventListener("click", userActionUserTimeout, false);
document.addEventListener("scroll", userActionUserTimeout, false);*/


checkMenuMinimizer();
function checkMenuMinimizer(){

    if (typeof storeId !== "undefined") {
        var menu = Cookies.get("fws_menu_minimized_" + storeId);
        if (menu != undefined) {
            if (menu == "true") {
                document.addEventListener("DOMContentLoaded", function () {
                    document.querySelector("nav").classList.add("nav_closed");
                    document.querySelector("header").classList.add("nav_closed");
                    document.querySelector(".main").classList.add("nav_closed");
                    if (document.getElementById("breadcrumbs")) {
                        document.querySelector("#breadcrumbs").classList.add("nav_closed");
                    }
                });
            }
        }
    }
}

//window.addEventListener('offline', pollOffline);
//window.addEventListener('online', pollOnline);

//function pollOffline() {
//	fadeInClass('overlay_forced', 'offline_modal');
//	document.querySelector('body').classList.add('body_modal_is_open');
//}

//function pollOnline() {
//	fadeOutClass('overlay_forced', 'offline_modal');
//	document.querySelector('body').classList.remove('body_modal_is_open');
//}

function isIE() {
	return window.navigator.userAgent.match(/(MSIE|Trident)/);
};

//ready(function () {
//	if (isIE()) {
//		getId('ie_banner').style.display = "block";
//	}
//});

//function demoEventStream() {
//	let es = new EventSource("http://localhost:8080/orderEvent/"+storeId, {withCredentials:true});
//	es.onmessage = function(event) {
//		//	};
//}

//ready(demoEventStream);

/*! lazysizes - v5.0.0 */
!function (a, b) { var c = b(a, a.document); a.lazySizes = c, "object" == typeof module && module.exports && (module.exports = c) }(window, function (a, b) { "use strict"; if (b.getElementsByClassName) { var c, d, e = b.documentElement, f = a.Date, g = a.HTMLPictureElement, h = "addEventListener", i = "getAttribute", j = a[h], k = a.setTimeout, l = a.requestAnimationFrame || k, m = a.requestIdleCallback, n = /^picture$/i, o = ["load", "error", "lazyincluded", "_lazyloaded"], p = {}, q = Array.prototype.forEach, r = function (a, b) { return p[b] || (p[b] = new RegExp("(\\s|^)" + b + "(\\s|$)")), p[b].test(a[i]("class") || "") && p[b] }, s = function (a, b) { r(a, b) || a.setAttribute("class", (a[i]("class") || "").trim() + " " + b) }, t = function (a, b) { var c; (c = r(a, b)) && a.setAttribute("class", (a[i]("class") || "").replace(c, " ")) }, u = function (a, b, c) { var d = c ? h : "removeEventListener"; c && u(a, b), o.forEach(function (c) { a[d](c, b) }) }, v = function (a, d, e, f, g) { var h = b.createEvent("Event"); return e || (e = {}), e.instance = c, h.initEvent(d, !f, !g), h.detail = e, a.dispatchEvent(h), h }, w = function (b, c) { var e; !g && (e = a.picturefill || d.pf) ? (c && c.src && !b[i]("srcset") && b.setAttribute("srcset", c.src), e({ reevaluate: !0, elements: [b] })) : c && c.src && (b.src = c.src) }, x = function (a, b) { return (getComputedStyle(a, null) || {})[b] }, y = function (a, b, c) { for (c = c || a.offsetWidth; c < d.minSize && b && !a._lazysizesWidth;)c = b.offsetWidth, b = b.parentNode; return c }, z = function () { var a, c, d = [], e = [], f = d, g = function () { var b = f; for (f = d.length ? e : d, a = !0, c = !1; b.length;)b.shift()(); a = !1 }, h = function (d, e) { a && !e ? d.apply(this, arguments) : (f.push(d), c || (c = !0, (b.hidden ? k : l)(g))) }; return h._lsFlush = g, h }(), A = function (a, b) { return b ? function () { z(a) } : function () { var b = this, c = arguments; z(function () { a.apply(b, c) }) } }, B = function (a) { var b, c = 0, e = d.throttleDelay, g = d.ricTimeout, h = function () { b = !1, c = f.now(), a() }, i = m && g > 49 ? function () { m(h, { timeout: g }), g !== d.ricTimeout && (g = d.ricTimeout) } : A(function () { k(h) }, !0); return function (a) { var d; (a = !0 === a) && (g = 33), b || (b = !0, d = e - (f.now() - c), d < 0 && (d = 0), a || d < 9 ? i() : k(i, d)) } }, C = function (a) { var b, c, d = 99, e = function () { b = null, a() }, g = function () { var a = f.now() - c; a < d ? k(g, d - a) : (m || e)(e) }; return function () { c = f.now(), b || (b = k(g, d)) } }; !function () { var b, c = { lazyClass: "lazyload", loadedClass: "lazyloaded", loadingClass: "lazyloading", preloadClass: "lazypreload", errorClass: "lazyerror", autosizesClass: "lazyautosizes", srcAttr: "data-src", srcsetAttr: "data-srcset", sizesAttr: "data-sizes", minSize: 40, customMedia: {}, init: !0, expFactor: 1.5, hFac: .8, loadMode: 2, loadHidden: !0, ricTimeout: 0, throttleDelay: 125 }; d = a.lazySizesConfig || a.lazysizesConfig || {}; for (b in c) b in d || (d[b] = c[b]); k(function () { d.init && F() }) }(); var D = function () { var g, l, m, o, p, y, D, F, G, H, I, J, K = /^img$/i, L = /^iframe$/i, M = "onscroll" in a && !/(gle|ing)bot/.test(navigator.userAgent), N = 0, O = 0, P = 0, Q = -1, R = function (a) { P-- , (!a || P < 0 || !a.target) && (P = 0) }, S = function (a) { return null == J && (J = "hidden" == x(b.body, "visibility")), J || "hidden" != x(a.parentNode, "visibility") && "hidden" != x(a, "visibility") }, T = function (a, c) { var d, f = a, g = S(a); for (F -= c, I += c, G -= c, H += c; g && (f = f.offsetParent) && f != b.body && f != e;)(g = (x(f, "opacity") || 1) > 0) && "visible" != x(f, "overflow") && (d = f.getBoundingClientRect(), g = H > d.left && G < d.right && I > d.top - 1 && F < d.bottom + 1); return g }, U = function () { var a, f, h, j, k, m, n, p, q, r, s, t, u = c.elements; if ((o = d.loadMode) && P < 8 && (a = u.length)) { for (f = 0, Q++; f < a; f++)if (u[f] && !u[f]._lazyRace) if (!M || c.prematureUnveil && c.prematureUnveil(u[f])) aa(u[f]); else if ((p = u[f][i]("data-expand")) && (m = 1 * p) || (m = O), r || (r = !d.expand || d.expand < 1 ? e.clientHeight > 500 && e.clientWidth > 500 ? 500 : 370 : d.expand, c._defEx = r, s = r * d.expFactor, t = d.hFac, J = null, O < s && P < 1 && Q > 2 && o > 2 && !b.hidden ? (O = s, Q = 0) : O = o > 1 && Q > 1 && P < 6 ? r : N), q !== m && (y = innerWidth + m * t, D = innerHeight + m, n = -1 * m, q = m), h = u[f].getBoundingClientRect(), (I = h.bottom) >= n && (F = h.top) <= D && (H = h.right) >= n * t && (G = h.left) <= y && (I || H || G || F) && (d.loadHidden || S(u[f])) && (l && P < 3 && !p && (o < 3 || Q < 4) || T(u[f], m))) { if (aa(u[f]), k = !0, P > 9) break } else !k && l && !j && P < 4 && Q < 4 && o > 2 && (g[0] || d.preloadAfterLoad) && (g[0] || !p && (I || H || G || F || "auto" != u[f][i](d.sizesAttr))) && (j = g[0] || u[f]); j && !k && aa(j) } }, V = B(U), W = function (a) { var b = a.target; if (b._lazyCache) return void delete b._lazyCache; R(a), s(b, d.loadedClass), t(b, d.loadingClass), u(b, Y), v(b, "lazyloaded") }, X = A(W), Y = function (a) { X({ target: a.target }) }, Z = function (a, b) { try { a.contentWindow.location.replace(b) } catch (c) { a.src = b } }, $ = function (a) { var b, c = a[i](d.srcsetAttr); (b = d.customMedia[a[i]("data-media") || a[i]("media")]) && a.setAttribute("media", b), c && a.setAttribute("srcset", c) }, _ = A(function (a, b, c, e, f) { var g, h, j, l, o, p; (o = v(a, "lazybeforeunveil", b)).defaultPrevented || (e && (c ? s(a, d.autosizesClass) : a.setAttribute("sizes", e)), h = a[i](d.srcsetAttr), g = a[i](d.srcAttr), f && (j = a.parentNode, l = j && n.test(j.nodeName || "")), p = b.firesLoad || "src" in a && (h || g || l), o = { target: a }, s(a, d.loadingClass), p && (clearTimeout(m), m = k(R, 2500), u(a, Y, !0)), l && q.call(j.getElementsByTagName("source"), $), h ? a.setAttribute("srcset", h) : g && !l && (L.test(a.nodeName) ? Z(a, g) : a.src = g), f && (h || l) && w(a, { src: g })), a._lazyRace && delete a._lazyRace, t(a, d.lazyClass), z(function () { var b = a.complete && a.naturalWidth > 1; p && !b || (b && s(a, "ls-is-cached"), W(o), a._lazyCache = !0, k(function () { "_lazyCache" in a && delete a._lazyCache }, 9)), "lazy" == a.loading && P-- }, !0) }), aa = function (a) { if (!a._lazyRace) { var b, c = K.test(a.nodeName), e = c && (a[i](d.sizesAttr) || a[i]("sizes")), f = "auto" == e; (!f && l || !c || !a[i]("src") && !a.srcset || a.complete || r(a, d.errorClass) || !r(a, d.lazyClass)) && (b = v(a, "lazyunveilread").detail, f && E.updateElem(a, !0, a.offsetWidth), a._lazyRace = !0, P++ , _(a, b, f, e, c)) } }, ba = C(function () { d.loadMode = 3, V() }), ca = function () { 3 == d.loadMode && (d.loadMode = 2), ba() }, da = function () { if (!l) { if (f.now() - p < 999) return void k(da, 999); l = !0, d.loadMode = 3, V(), j("scroll", ca, !0) } }; return { _: function () { p = f.now(), c.elements = b.getElementsByClassName(d.lazyClass), g = b.getElementsByClassName(d.lazyClass + " " + d.preloadClass), j("scroll", V, !0), j("resize", V, !0), a.MutationObserver ? new MutationObserver(V).observe(e, { childList: !0, subtree: !0, attributes: !0 }) : (e[h]("DOMNodeInserted", V, !0), e[h]("DOMAttrModified", V, !0), setInterval(V, 999)), j("hashchange", V, !0), ["focus", "mouseover", "click", "load", "transitionend", "animationend"].forEach(function (a) { b[h](a, V, !0) }), /d$|^c/.test(b.readyState) ? da() : (j("load", da), b[h]("DOMContentLoaded", V), k(da, 2e4)), c.elements.length ? (U(), z._lsFlush()) : V() }, checkElems: V, unveil: aa, _aLSL: ca } }(), E = function () { var a, c = A(function (a, b, c, d) { var e, f, g; if (a._lazysizesWidth = d, d += "px", a.setAttribute("sizes", d), n.test(b.nodeName || "")) for (e = b.getElementsByTagName("source"), f = 0, g = e.length; f < g; f++)e[f].setAttribute("sizes", d); c.detail.dataAttr || w(a, c.detail) }), e = function (a, b, d) { var e, f = a.parentNode; f && (d = y(a, f, d), e = v(a, "lazybeforesizes", { width: d, dataAttr: !!b }), e.defaultPrevented || (d = e.detail.width) && d !== a._lazysizesWidth && c(a, f, e, d)) }, f = function () { var b, c = a.length; if (c) for (b = 0; b < c; b++)e(a[b]) }, g = C(f); return { _: function () { a = b.getElementsByClassName(d.autosizesClass), j("resize", g) }, checkElems: g, updateElem: e } }(), F = function () { F.i || (F.i = !0, E._(), D._()) }; return c = { cfg: d, autoSizer: E, loader: D, init: F, uP: w, aC: s, rC: t, hC: r, fire: v, gW: y, rAF: z } } });


var checkifAppEnabledStoreList = null;
function checkifAppEnabled(appId) {

    return new Promise(function (resolve, reject) {
    
    var appEnabled = false;

        axiosGet('/services/appstore/apps.svc/ListStoreApps?storeId=' + storeId).then(function (data) {
            //trace("ListStoreApps:success");
            checkifAppEnabledStoreList = data.d;
            //            //
            if (checkifAppEnabledStoreList != null) {

                if (checkifAppEnabledStoreList.length > 0) {

                    checkifAppEnabledStoreList.filter(function (obj) {
                        if (obj.appId == appId && obj.status == "ACTIVE") {
                                                        appEnabled = true;
                            
                        }
                    });
                }
            } 

        }).catch(function () {
            //trace("ListStoreApps:error");
       
        }).then(function () {
            //trace("ListStoreApps:complete");
            resolve(appEnabled);
        });
    });
}



function checkUrlIsDomain(url) {
    var urlCheck1 = url.match(/my-online.store/g);
    var urlCheck2 = url.match(/.fws.store/g);
    var urlCheck3 = url.match(/.onlineweb.shop/g);
    var urlCheck4 = url.match(/.1st4offers.com/g);
    var urlCheck5 = url.match(/.fwscart.com/g);
    var urlCheck6 = url.match(/.fwscheckout.com/g);
    var urlCheck7 = url.match(/.offersupermarket.com/g);
    var urlCheck8 = url.match(/www.freewebstore.org/g);

    if (urlCheck1 || urlCheck2 || urlCheck3 || urlCheck4 || urlCheck5 || urlCheck6 || urlCheck7 || urlCheck8) {
        return true;
    } else {
        return false;
    }
}


function getStoreObject() {

    return new Promise(function (resolve, reject) {

        axiosGet('./services/account/accountv2.svc/getStoreObject?storeId=' + storeId).then(function (data) {

            var storeObject = data.d;

            resolve(storeObject);

        }).catch(function () {
            resolve(null);
        });

    });
}

//IE 

// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }

            var o = Object(this);

            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;

            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }

            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];

            // 5. Let k be 0.
            var k = 0;

            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return k.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return k;
                }
                // e. Increase k by 1.
                k++;
            }

            // 7. Return -1.
            return -1;
        },
        configurable: true,
        writable: true
    });
}


function passwordReveal(id) {

    var currentType = document.getElementById(id).getAttribute("type");
    if (currentType == "password") {
        document.getElementById(id).setAttribute("type", "text");
        document.querySelector("i[data-id='" + id + "']").classList.remove("fa-eye-slash");
        document.querySelector("i[data-id='" + id + "']").classList.add("fa-eye");
    } else {
        document.getElementById(id).setAttribute("type", "password");
        document.querySelector("i[data-id='" + id + "']").classList.remove("fa-eye");
        document.querySelector("i[data-id='" + id + "']").classList.add("fa-eye-slash");
    }
}

function shuffleArray(a) {
    var j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}