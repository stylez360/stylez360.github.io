

var billingv2OverviewInfo;

function buildBillingV2Overview() {

    hideById("modal_billingv2_overview_container", "modal_billingv2_overview_check_vat_error", "modal_billingv2_overview_card_container", "modal_billingv2_overview_general_error", "modal_billingv2_overview_error");
    showByClass("busy_wait_billingv2_overview", "busy_wait_billingv2_overview_card");
    document.getElementById("modal_billingv2_overview_confirm_payment").classList.add("button_disabled");
    document.getElementById("modal_billingv2_overview_confirm_payment").innerHTML = "<i class='fa fa-lock marginr5' aria-hidden='true'></i>Confirm Payment";
    divFadeIn(".overlay_forced", ".modal_billingv2_overview");

    billingv2OverviewInfo = billingV2InstructionsAll;

    // Check VAT Status
    buildBillingV2OverviewVat();
    

}

var billingV2VatCheck = false;
function billingV2OpenVatModal() {
    billingV2VatCheck = true;
    hideByClass("modal_billingv2_overview");
    $(".modal_vat_setup .modal_close, .cancelVatStatus_button").remove();
    $(".modal_vat_setup, .overlay_forced").fadeIn();
    VATSettings();
}

function buildBillingV2OverviewVat() {

    // Check their VAT Status
    axiosGet('/services/settingsv2/settings_pricing.svc/VATInformation?storeId=' + storeId).then(function (data) {
        var check = data.d;
        console.log(check);

        //Operated in GB (Not VAT Registered)
        //Please take a moment to notify us of your VAT status.
        
        if (check != null && check.VATStatus != null) {
            if (check.VATStatus == "Please take a moment to notify us of your VAT status.") {
                billingV2OpenVatModal();
            } else {
                getBillingV2Currency();
            }
        } else {
            billingV2OpenVatModal();
        }

    }).catch(function () {
        hideByClass("busy_wait_billingv2_overview");
        showById("modal_billingv2_overview_check_vat_error");
    }).then(function () {

    });

}

var billingV2Currency = "USD";
var billingV2CurrencyHasSubscription = false;
function getBillingV2Currency() {
    showByClass("modal_billingv2_overview");
    console.log("Get the currency");
    getCorrectCurrency().then(function (res) {
        billingV2Currency = res.currency;
        billingV2CurrencyHasSubscription = res.subscription;
        buildBillingV2OverviewDetails();
    });
}

var threeDSecurePrice = "0.00";
function buildBillingV2OverviewDetails() {
    console.log("Get Overview details");
    console.log(billingv2OverviewInfo)

    var infoId = "";
    var infoPeriod = null;
    var infoTrial = false;
    switch (billingv2OverviewInfo.case) {
        case "1a":
            infoId = billingv2OverviewInfo.invoiceId;
            break;
        case "2":
            infoId = billingv2OverviewInfo.packageType;
            infoPeriod = billingv2OverviewInfo.packagePeriod;
            if (billingv2OverviewInfo.trial != null) {
                infoTrial = billingv2OverviewInfo.trial;
            }
            break;
        case "3":
            infoId = billingv2OverviewInfo.domain;
            break;
        case "4a":
            infoId = billingv2OverviewInfo.appId;
            break;
        case "8":
            infoId = billingv2OverviewInfo.amount;
            break;
        case "9":
            infoId = billingv2OverviewInfo.domains;
            break;
    }

    var thePageUrl = "";
    try {
        thePageUrl = location.pathname;
    } catch(e){ }

    var data = {
        "storeId": storeId,
        "infoCase": billingv2OverviewInfo.case,
        "infoId": infoId,
        "infoCurrency": billingV2Currency,
        "infoPeriod": infoPeriod,
        "pageReferralUrl": thePageUrl,
        "trial": infoTrial
    }

    data = JSON.stringify(data);

    console.log(data);

    var url = '/services/billing/billingv2.svc/getPaymentOverview';

    axiosPost(url, data).then(function (data) {
        trace("getPaymentOverview:success");

        var paymentOverview = data.d;
        console.log(paymentOverview);

        document.getElementById("modal_billingv2_overview_details_image").setAttribute("src", paymentOverview.img);
        document.getElementById("modal_billingv2_overview_details_info_title").innerText = paymentOverview.title;

        var currencySymbol = "&dollar;";
        if (paymentOverview.currencySymbol != null && paymentOverview.currencySymbol.length > 0) {
            currencySymbol = paymentOverview.currencySymbol;
        }

        var hasTax = false;
        if (paymentOverview.vat_rate > 0 && paymentOverview.total != 0) {
            hasTax = true;

            document.getElementById("modal_billingv2_overview_details_info_net").innerHTML = "<strong>Net:</strong> " + currencySymbol + paymentOverview.net.toFixed(2);
            document.getElementById("modal_billingv2_overview_details_info_net").style.display = "block";
            document.getElementById("modal_billingv2_overview_details_info_rate").innerHTML = "<strong>Rate:</strong> " + paymentOverview.vat_rate + "% Tax " + paymentOverview.tax_country;
            document.getElementById("modal_billingv2_overview_details_info_rate").style.display = "block";
            document.getElementById("modal_billingv2_overview_details_info_tax").innerHTML = "<strong>Tax:</strong> " + currencySymbol + paymentOverview.vat.toFixed(2);
            document.getElementById("modal_billingv2_overview_details_info_tax").style.display = "block";
        } 
        threeDSecurePrice = paymentOverview.total;

        if (hasTax == true) {
            document.getElementById("modal_billingv2_overview_details_info_priceTotal").innerHTML = currencySymbol + paymentOverview.total.toFixed(2) + " inc. Tax <i id='modal_billingv2_overview_details_info_priceTotal_icon' class='fa fa-caret-down' aria-hidden='true'></i>";
            document.getElementById("modal_billingv2_overview_details_info_priceTotal").setAttribute("onclick", "billingv2OverviewToggleTax()");
            document.getElementById("modal_billingv2_overview_details_info_priceTotal").classList.add("modal_billingv2_overview_details_info_priceTotal_hastax");
        } else {
            document.getElementById("modal_billingv2_overview_details_info_priceTotal").innerHTML = currencySymbol + paymentOverview.total.toFixed(2);
        }

        if (paymentOverview.discountActive == true) {
            document.getElementById("modal_billingv2_overview_details_info_discount_percent").innerText = paymentOverview.discountPercent + "%";
            showByIdInline("modal_billingv2_overview_details_info_discount");
            showByIdInline("modal_billingv2_overview_details_info_rrp_container");
            document.getElementById("modal_billingv2_overview_details_info_rrp").innerText = currencySymbol + paymentOverview.rrp.toFixed(2);
            /*showById("modal_billingv2_overview_details_sub_message_discount");*/
        } else {
            hideById("modal_billingv2_overview_details_info_discount");
            hideById("modal_billingv2_overview_details_info_rrp_container");
        }

        var afterTrial = "";

        if (paymentOverview.trialEndDate != null && paymentOverview.trialEndDate != "") {
            document.getElementById("modal_billingv2_overview_confirm_payment").innerHTML = '<i class="fa fa-lock marginr5" aria-hidden="true"></i> Start Trial';
            if (document.querySelector("#modal_billingv2_overview_card_nocards h3") != null) {
                document.querySelector("#modal_billingv2_overview_card_nocards h3").innerText = "Please add a payment method to start your trial."
            }
            afterTrial = " After Trial";
            showByIdInline("modal_billingv2_overview_details_info_trial");
            showById("modal_billingv2_overview_details_sub_message_trial");
            document.getElementById("modal_billingv2_overview_details_sub_message_trial_date").innerText = paymentOverview.trialEndDate;
            showById("modal_billingv2_overview_card_nocards_trial");
            document.getElementById("modal_billingv2_overview_card_nocards_trial_info_date").innerText = paymentOverview.trialEndDate;
        } else {
            hideById("modal_billingv2_overview_details_info_trial");
            hideById("modal_billingv2_overview_details_sub_message_trial");
            if (document.querySelector("#modal_billingv2_overview_card_nocards h3") != null) {
                document.querySelector("#modal_billingv2_overview_card_nocards h3").innerText = "Please add a payment method."
                hideById("modal_billingv2_overview_card_nocards_trial");
            }
        }

        if (paymentOverview.period != null) {
            var periodLength = "Billed Monthly" + afterTrial;
            if (paymentOverview.period === 12) {
                periodLength = "Billed Annually" + afterTrial;
            }
            document.getElementById("modal_billingv2_overview_details_info_period").innerHTML = periodLength;
            document.getElementById("modal_billingv2_overview_details_info_period").style.display = "block";
        }

        showById("modal_billingv2_overview_container");
        hideByClass("busy_wait_billingv2_overview");

        if (paymentOverview.total != 0) {
            buildBillingV2OverviewCard();
        } else {
            if (paymentOverview.title == "Domain Name") {
                document.getElementById("modal_billingv2_overview_title").innerText = "Claim Domain";
                document.getElementById("modal_billingv2_overview_install_free_app").innerText = "Claim Domain";
            } else {
                document.getElementById("modal_billingv2_overview_title").innerText = "Enable App";
            }
            document.getElementById("modal_billingv2_overview_details_info_priceTotal").innerText = "Free";
            hideById("modal_billingv2_overview_details_sub_message");
            hideByClass("modal_billingv2_overview_confirm_payment");
            hideById("modal_billingv2_overview_confirm_payment");
            showById("modal_billingv2_overview_install_free_app");
            document.getElementById("modal_billingv2_overview_install_free_app").setAttribute("onclick", "installAppFree();");
            document.getElementById("modal_billingv2_overview_details_info_period").style.display = "none";
        }

        if (billingv2OverviewInfo.case === "3") {
            document.getElementById("modal_billingv2_overview_details_sub_message").innerText = infoId;
            if (paymentOverview.token == true) {
                hideByClass("modal_billingv2_overview", "busy_wait_billingv2_processing");
                showByClass("modal_billingv2_processing");
                hideById("modal_billingv2_processing_case3_success_step1", "modal_billingv2_processing_case3_success_step2_warning");
                showById("modal_billingv2_processing_case3_success");
                showById("modal_billingv2_processing_footer");
                document.getElementById("modal_billingv2_processing_title").innerText = "Register";
                getDomainRegistrationAddress();
            }
        }

        if (billingv2OverviewInfo.case === "8") {
            hideById("modal_billingv2_overview_details_sub_message");
        }

    }).catch(function () {
        trace("getPaymentOverview:error");
        showById("modal_billingv2_overview_error");
        hideByClass("busy_wait_billingv2_overview");

    }).then(function () {
        trace("getPaymentOverview:complete");
    });

}

function billingv2OverviewToggleTax() {
    document.getElementById("modal_billingv2_overview_details_info_tax_overview").classList.toggle("modal_billingv2_overview_details_info_tax_overview_show");
    document.getElementById("modal_billingv2_overview_details_info_priceTotal_icon").classList.toggle("fa-caret-up");
}

function buildBillingV2OverviewCard() {

    showById("modal_billingv2_overview_card_container");
    hideById("modal_billingv2_overview_card_selected", "modal_billingv2_overview_card_hascards", "modal_billingv2_overview_card_nocards", "modal_billingv2_overview_card_noneselected");
    showByClass("busy_wait_billingv2_overview_card");


    // Check to see if we have any payment methods
    axiosGet('/services/billing/billingv2.svc/ListPaymentMethods?storeId=' + storeId).then(function (data) {
        trace("ListPaymentMethods:Success");

        billingv2ListMethods = data.d || data;
        billingv2ListMethods = JSON.parse(billingv2ListMethods)

        console.log(billingv2ListMethods);

        if (billingv2ListMethods.length > 0) {
            buildBillingV2OverviewCardHasCards(billingv2ListMethods);
        } else {
            buildBillingV2OverviewCardNoCards();
        }

    }).catch(function () {
        trace("ListPaymentMethods:Error");

        

    }).then(function () {
        trace("ListPaymentMethods:Complete");
        hideByClass("busy_wait_billingv2_overview_card");
    });


}

function buildBillingV2OverviewCardNoCards() {
    showById("modal_billingv2_overview_card_nocards");
}

function buildBillingV2OverviewCardHasCards(billingv2ListMethods) {
    console.log("Has cards so try and get a primary card");

    console.log(billingv2ListMethods)

    var selectedMethod = billingv2ListMethods.filter(function (obj) {
        if (obj.isDefault === true) {
            if (obj.methodType == "CreditCard") {
                if (obj.card.isExpired != true) {
                    return obj;
                }
            } else {
                return obj;
            }
        }
    });

    if (selectedMethod.length > 0) {

        selectedMethod = selectedMethod[0];

        var selectedMethodHtml = "";
        var selectedMethodHtmlInfo = "";

        if (selectedMethod.methodType == "CreditCard") {

            var name = selectedMethod.card.cardholdername;
            if (name != null) {
                selectedMethodHtmlInfo += "<div><strong>" + selectedMethod.card.cardholdername + "</strong></div>";
            }

            selectedMethodHtmlInfo += "<div>" + selectedMethod.card.masked + "</div>";
            selectedMethodHtmlInfo += "<div>" + selectedMethod.card.expiry_mo + "/" + selectedMethod.card.expiry_yr + "</div>";

        } else {
            selectedMethodHtmlInfo += "<div><strong>" + selectedMethod.paypal.email + "</strong></div>";
        }

        selectedMethodHtml += '<div class="modal_billingv2_overview_card_selected_item" data-token="' + selectedMethod.token + '">';
            selectedMethodHtml += '<div class="modal_billingv2_overview_card_selected_item_image_container">';
                selectedMethodHtml += '<img src="' + selectedMethod.logo + '" />';
            selectedMethodHtml += '</div>';
            selectedMethodHtml += '<div class="modal_billingv2_overview_card_selected_item_info">';
                selectedMethodHtml += selectedMethodHtmlInfo;
            selectedMethodHtml += '</div>';
        selectedMethodHtml += '</div>';

        document.getElementById("modal_billingv2_overview_card_selected_inner").innerHTML = selectedMethodHtml;

        console.log(selectedMethod);

        showById("modal_billingv2_overview_card_selected");
        document.getElementById("modal_billingv2_overview_confirm_payment").classList.remove("button_disabled");


        // Check to see where the "Change" link should direct the user to
        if (billingv2ListMethods.length > 1) {
            document.getElementById("modal_billingv2_overview_card_selected_change").setAttribute("onclick", "loadBillingV2PaymentVault(billingv2ListMethods, \"" + selectedMethod.token + "\");");
        } else {
            document.getElementById("modal_billingv2_overview_card_selected_change").setAttribute("onclick", "loadBillingV2AddPaymentMethod();");
        }

    } else {
        showById("modal_billingv2_overview_card_hascards");
        document.getElementById("modal_billingv2_overview_card_hascards_button").setAttribute("onclick", "loadBillingV2PaymentVault(billingv2ListMethods);");
        
    }

}

function billingv2SelectCardOverview(payload, type) {
    hideByClass("modal_billingv2_cards_in_vault");
    showByClass("modal_billingv2_overview");
    hideById("modal_billingv2_overview_general_error");

    console.log("-----------");
    console.log("THIS JUST RAN")
    console.log(payload);
    console.log(type)

    if (type == "CreditCard") {
        var selectedMethod = billingv2ListMethods.filter(function (obj) {
            if (obj.methodType == "CreditCard") {
                if (obj.token === payload) {
                    if (obj.methodType == "CreditCard") {
                        if (obj.card.isExpired != true) {
                            return obj;
                        }
                    }
                }
            }
        });
    } else {
        var selectedMethod = billingv2ListMethods.filter(function (obj) {
            if (obj.methodType == "PaypalAccount") {
                if (obj.token == payload || obj.paypal.payerId === payload) {
                    return obj;
                }
            }
        });
    }
    console.log(selectedMethod)

    selectedMethod = selectedMethod[0];

    var selectedMethodHtml = "";
    var selectedMethodHtmlInfo = "";

    if (selectedMethod.methodType == "CreditCard") {

        var name = selectedMethod.card.cardholdername;
        if (name != null) {
            selectedMethodHtmlInfo += "<div><strong>" + selectedMethod.card.cardholdername + "</strong></div>";
        }

        selectedMethodHtmlInfo += "<div>" + selectedMethod.card.masked + "</div>";
        selectedMethodHtmlInfo += "<div>" + selectedMethod.card.expiry_mo + "/" + selectedMethod.card.expiry_yr + "</div>";

    } else {
        selectedMethodHtmlInfo += "<div><strong>" + selectedMethod.paypal.email + "</strong></div>";
    }

    selectedMethodHtml += '<div class="modal_billingv2_overview_card_selected_item" data-token="' + selectedMethod.token + '">';
    selectedMethodHtml += '<div class="modal_billingv2_overview_card_selected_item_image_container">';
    selectedMethodHtml += '<img src="' + selectedMethod.logo + '" />';
    selectedMethodHtml += '</div>';
    selectedMethodHtml += '<div class="modal_billingv2_overview_card_selected_item_info">';
    selectedMethodHtml += selectedMethodHtmlInfo;
    selectedMethodHtml += '</div>';
    selectedMethodHtml += '</div>';

    document.getElementById("modal_billingv2_overview_card_selected_inner").innerHTML = selectedMethodHtml;

    console.log(selectedMethod);

    if (billingv2ListMethods.length > 1) {
        document.getElementById("modal_billingv2_overview_card_selected_change").setAttribute("onclick", "loadBillingV2PaymentVault(billingv2ListMethods, \"" + selectedMethod.token + "\");");
    } else {
        document.getElementById("modal_billingv2_overview_card_selected_change").setAttribute("onclick", "loadBillingV2AddPaymentMethod();");
    }

    hideById("modal_billingv2_overview_card_hascards");
    showById("modal_billingv2_overview_card_selected");
    document.getElementById("modal_billingv2_overview_confirm_payment").classList.remove("button_disabled");

}

function backToBillingv2Overview() {
    hideByClass("modal_billingv2_cards_in_vault");
    showByClass("modal_billingv2_overview");
    hideById("modal_billingv2_overview_general_error");
}


function billingv2AddedCardOverview(payload, type) {

    // Check to see if we have any payment methods
    axiosGet('/services/billing/billingv2.svc/ListPaymentMethods?storeId=' + storeId).then(function (data) {
        trace("ListPaymentMethods:Success");

        billingv2ListMethods = data.d || data;
        billingv2ListMethods = JSON.parse(billingv2ListMethods)

        console.log(billingv2ListMethods);

        if (billingv2ListMethods.length > 0) {
            billingv2SelectCardOverview(payload, type);
        } else {
            buildBillingV2OverviewCardNoCards();
        }

    }).catch(function () {
        trace("ListPaymentMethods:Error");



    }).then(function () {
        trace("ListPaymentMethods:Complete");
        hideByClass("busy_wait_billingv2_overview_card");

        document.getElementById("modal_billingv2_cards_in_vault_button").classList.remove("button_disabled");
        document.getElementById("modal_billingv2_cards_in_vault_button").innerHTML = "Select Payment Method";
        hideById("modal_billingv2_overview_card_noneselected");
    });
}


var billingv2ConfirmPaymentFinal = false;
function billingOverviewConfirmPayment() {

    hideById("modal_billingv2_overview_general_error");

    if (document.querySelector(".modal_billingv2_overview_card_selected_item")) {

        document.getElementById("modal_billingv2_overview_card_selected_change").classList.add("link_disabled");
        document.getElementById("modal_billingv2_overview_close_button_X").classList.add("link_disabled");
        document.getElementById("modal_billingv2_overview_close_button").classList.add("button_disabled");

        billingv2ConfirmPaymentFinal = true;
        var selectedPaymentMethod = document.querySelector(".modal_billingv2_overview_card_selected_item").getAttribute("data-token");

        document.getElementById("modal_billingv2_overview_confirm_payment").classList.add("button_disabled");
        document.getElementById("modal_billingv2_overview_confirm_payment").innerHTML = "<i class='fa fa-spinner fa-spin marginr5'></i>Confirming";

        getNonceFromToken(selectedPaymentMethod);

    } else {
        showById("modal_billingv2_overview_card_noneselected");
    }

}

function billingv2OverviewConfirmFailed(errorMessage) {

    trace("billingv2OverviewConfirmFailed");

    document.getElementById("modal_billingv2_overview_confirm_payment").classList.remove("button_disabled");
    document.getElementById("modal_billingv2_overview_confirm_payment").innerHTML = "<i class='fa fa-lock marginr5' aria-hidden='true'></i>Confirm";

    document.getElementById("modal_billingv2_overview_card_selected_change").classList.remove("link_disabled");
    document.getElementById("modal_billingv2_overview_close_button_X").classList.remove("link_disabled");
    document.getElementById("modal_billingv2_overview_close_button").classList.remove("button_disabled");

    if (errorMessage != null && errorMessage.length > 0) {
        document.getElementById("modal_billingv2_overview_general_error_message").innerHTML = "<p>" + errorMessage + "</p>";
        showById("modal_billingv2_overview_general_error_message");
    }
    showById("modal_billingv2_overview_general_error");
}

function getNonceFromToken(token) {

    axiosGet('/services/billing/billingv2.svc/getNonceFromToken?storeId=' + storeId + '&token=' + token).then(function (data) {
        trace("success:getNonceFromToken");

        var nonceObject = data.d;
        console.log(nonceObject);

        if (nonceObject != null) {
            nonceObject = JSON.parse(nonceObject);
            if (nonceObject.success) {
                if (billingV2ClientId == null) {
                    console.log("Don't have billing client");
                    getBillingClientId.then(function (result) {
                        if (nonceObject.type != "PayPalAccount") {
                            createBraintreeWithThreeDSecure(nonceObject, result);
                        } else {
                            billingv2StartPaymentProcess(nonceObject.nonce);
                        }
                    }, function (err) {
                        console.log("FAILED FAILED");
                        billingv2OverviewConfirmFailed("Unable to retrieve Client ID");
                    });

                    
                } else {
                    if (nonceObject.type != "PayPalAccount") {
                        createBraintreeWithThreeDSecure(nonceObject, billingV2ClientId.token);
                    } else {
                        billingv2StartPaymentProcess(nonceObject.nonce);
                    }
                }
            } else {
                billingv2OverviewConfirmFailed(nonceObject.errors);
            }

        } else {
            billingv2OverviewConfirmFailed();
        }

    }).catch(function () {
        trace("error:getNonceFromToken");
        billingv2OverviewConfirmFailed();

    }).then(function () {
        trace("complete:getNonceFromToken");

    });

}

var threeDSecure;
var billingV2DataCollector;
function createBraintreeWithThreeDSecure(nonceObject, billingV2ClientId) {

    console.log("createBraintreeWithThreeDSecure");

    braintree.client.create({
            // Use the generated client token to instantiate the Braintree client.
            authorization: billingV2ClientId
        }, function (clientErr, clientInstance) {
            if (clientErr) {
                // Handle error in client creation
                billingv2OverviewConfirmFailed("Unable to create Braintree Client");
                return;
            }

            braintree.threeDSecure.create({
                version: 2, // Will use 3DS 2 whenever possible
                client: clientInstance
            }, function (threeDSecureErr, threeDSecureInstance) {
                    console.log(threeDSecureErr);
                    if (threeDSecureErr) {
                        console.log(threeDSecureErr);
                        billingv2OverviewConfirmFailed("Unable to create 3D Secure component");
                        return;
                }

                braintree.dataCollector.create({
                    client: clientInstance
                }, function (err, dataCollectorInstance) {
                    if (err) {
                        console.log(error)
                    }
                    billingV2DataCollector = dataCollectorInstance.deviceData;
                });

                threeDSecure = threeDSecureInstance;
                verifyWith3DSecure(nonceObject);
            }
        );
    });


}

function verifyWith3DSecure(nonceObject) {

    console.log("verifyWith3DSecure");
    console.log(threeDSecurePrice)

    threeDSecure.verifyCard({
        amount: threeDSecurePrice,
        nonce: nonceObject.nonce,
        onLookupComplete: function (data, next) {
            // use `data` here, then call `next()`
            next();
        }
    }, function (err, response) {
            if (err) {
                console.log(err);
                billingv2OverviewConfirmFailed("Unable to verify card with 3D secure. Please try again or select a different payment method");
                return;
            }


        var liabilityShifted = response.liabilityShifted; // true || false
        var liabilityShiftPossible = response.liabilityShiftPossible; // true || false
        console.log(liabilityShifted);
        console.log(liabilityShiftPossible);

        billingv2StartPaymentProcess(response.nonce, billingV2DataCollector);
    });

}


function installAppFree() {

    appId = billingv2OverviewInfo.appId;

    billingv2ConfirmPaymentFinal = true;

    billingv2StartPaymentProcess('');
}