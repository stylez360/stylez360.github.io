

var billingv2NewCardAddress;
var existingBillingAddressLoaded = false;
var existingBillingAddress;

function loadBillingV2AddPaymentMethodCard() {

    hideByClass("modal_billingv2_cards_in_vault", "modal_billingv2_no_cards_in_vault");
    hideById("modal_billingv2_add_new_card_container", "modal_billingv2_add_new_card_error", "modal_billingv2_add_new_card_yours");
    showByClass("modal_billingv2_add_new_card", "busy_wait_billingv2_add_new_card");

    document.getElementById("modal_billingv2_add_new_card_fname").value = "";
    document.getElementById("modal_billingv2_add_new_card_lname").value = "";
    document.getElementById("modal_billingv2_add_new_card_address1").value = "";
    document.getElementById("modal_billingv2_add_new_card_address2").value = "";
    document.getElementById("modal_billingv2_add_new_card_city").value = "";
    document.getElementById("modal_billingv2_add_new_card_postal").value = "";

    if (existingBillingAddressLoaded != true) {
        billingV2LoadExistingBillingAddres();
    } else {
        getBillingClientId.then(function (result, merchantId) {
            if (billingV2BuildAddCardFormLoaded === false) {
                billingV2BuildAddCardForm(result, merchantId);
            } else {
                showById("modal_billingv2_add_new_card_container", "modal_billingv2_add_new_card_form_braintree_section", "modal_billingv2_add_new_card_back");
                hideByClass("busy_wait_billingv2_add_new_card");
            }
        }, function (err) {
            showById("modal_billingv2_add_new_card_error");
            hideByClass("busy_wait_billingv2_add_new_card");
        });
    }
}

function billingV2LoadExistingBillingAddres() {

    axiosGet('/services/billing/billingv2.svc/getBillingAddress?storeId=' + storeId).then(function (data) {
        trace("getBillingAddress:success");

        existingBillingAddress = data.d;
        console.log(existingBillingAddress);

        if (existingBillingAddress != null) {

            existingBillingAddressLoaded = true;

            console.log(existingBillingAddress.forename)

            var fname = existingBillingAddress.forename;
            var lname = existingBillingAddress.surname;
            var address1 = existingBillingAddress.address1;
            var address2 = existingBillingAddress.address2;
            var city = existingBillingAddress.city;
            var country = existingBillingAddress.country;
            var zip = existingBillingAddress.zip;

            if (fname != null && fname.length > 0) { document.querySelector("#modal_billingv2_add_new_card_fname").value = fname; }
            if (lname != null && lname.length > 0) { document.querySelector("#modal_billingv2_add_new_card_lname").value = lname; }
            if (address1 != null && address1.length > 0) { document.querySelector("#modal_billingv2_add_new_card_address1").value = address1; }
            if (address2 != null && address2.length > 0) { document.querySelector("#modal_billingv2_add_new_card_address2").value = address2; }
            if (city != null && city.length > 0) { document.querySelector("#modal_billingv2_add_new_card_city").value = city; }
            if (country != null && country.length > 0) { document.querySelector("#modal_billingv2_add_new_card_country").value = country; }
            if (zip != null && zip.length > 0) { document.querySelector("#modal_billingv2_add_new_card_zip").value = zip; }

        }

    }).catch(function () {
        trace("getBillingAddress:error");
    }).then(function () {
        trace("getBillingAddress:complete");
        if (billingV2ClientId == null) {

            getBillingClientId.then(function (result, merchantId) {
                if (billingV2BuildAddCardFormLoaded === false) {
                    billingV2BuildAddCardForm(result, merchantId);
                } else {
                    showById("modal_billingv2_add_new_card_container", "modal_billingv2_add_new_card_form_braintree_section", "modal_billingv2_add_new_card_back");
                    hideByClass("busy_wait_billingv2_add_new_card");
                }
            }, function (err) {
                showById("modal_billingv2_add_new_card_error");
                hideByClass("busy_wait_billingv2_add_new_card");
            });

        } else {
            if (billingV2BuildAddCardFormLoaded === false) {
                billingV2BuildAddCardForm(billingV2ClientId.token, billingV2ClientId.merchantAccountId);
            } else {
                showById("modal_billingv2_add_new_card_container", "modal_billingv2_add_new_card_form_braintree_section", "modal_billingv2_add_new_card_back");
                hideByClass("busy_wait_billingv2_add_new_card");
            }
            
        }
    });

    
}

var billingV2BuildAddCardFormLoaded = false;
var billingV2BuildAddCardFormInstance;
var threeDS;
var billingV2DataCollector;
function billingV2BuildAddCardForm(billingV2ClientId, merchantAccountId) {

    var braintreeHostedAddButton = document.getElementById("modal_billingv2_add_new_card_button");
    
    braintree.client.create({
        authorization: billingV2ClientId
    }, function (clientErr, clientInstance) {
        if (clientErr) {
            console.log(clientErr);
            return;
        }

        // This example shows Hosted Fields, but you can also use this
        // client instance to create additional components here, such as
        // PayPal or Data Collector.

        braintree.dataCollector.create({
            client: clientInstance
        }, function (err, dataCollectorInstance) {
            if (err) {
                console.log(error)
            }
            billingV2DataCollector = dataCollectorInstance.deviceData;
        });

        braintree.hostedFields.create({
            client: clientInstance,
            styles: {
                'input': {
                    'font-size': '14px'
                }
            },
            fields: {
                number: {
                    selector: '#modal_billingv2_add_new_card_cardnumber',
                    placeholder: '4111 1111 1111 1111'
                },
                cvv: {
                    selector: '#modal_billingv2_add_new_card_cvv',
                    placeholder: '123'
                },
                expirationDate: {
                    selector: '#modal_billingv2_add_new_card_expiration',
                    placeholder: '10/2022'
                }
            }
        }, function (hostedFieldsErr, hostedFieldsInstance) {

            console.log(hostedFieldsInstance);
            billingV2BuildAddCardFormInstance = hostedFieldsInstance;

            if (hostedFieldsErr) {
                console.error(hostedFieldsErr);
                return;
            }

            if (hostedFieldsInstance != undefined) {
                hostedFieldsInstance.on('validityChange', function (event) {
                    var formValid = Object.keys(event.fields).every(function (key) {
                        return event.fields[key].isValid;
                    });

                    if (formValid) {
                        braintreeHostedAddButton.classList.remove("button_disabled");
                    } else {
                        braintreeHostedAddButton.classList.add("button_disabled");
                    }
                });
            }
        });

        braintree.threeDSecure.create({
            version: 2, // Will use 3DS2 whenever possible
            client: clientInstance
        }, function (threeDSecureErr, threeDSecureInstance) {
            if (threeDSecureErr) {
                // Handle error in 3D Secure component creation
                return;
            }

            threeDS = threeDSecureInstance;
        });


        braintreeHostedAddButton.addEventListener('click', function (event) {
            braintreeHostedAddButton.classList.add("button_disabled");
            event.preventDefault();
            billingV2BuildAddCardFormInstance.tokenize({
                authenticationInsight: {
                    merchantAccountId: merchantAccountId
                },
                cardholderName: stripHTML(document.getElementById("modal_billingv2_add_new_card_cardname").value.trim())
            })
            .then(function (payload) {
                return threeDS.verifyCard({
                    onLookupComplete: function (data, next) {
                        next();
                    },
                    amount: "1.00",
                    nonce: payload.nonce,
                    bin: payload.details.bin,
                    billingAddress: {
                        givenName: stripHTML(document.getElementById("modal_billingv2_add_new_card_fname").value.trim()),
                        surname: stripHTML(document.getElementById("modal_billingv2_add_new_card_lname").value.trim()),
                        streetAddress: stripHTML(document.getElementById("modal_billingv2_add_new_card_address1").value.trim()),
                        extendedAddress: stripHTML(document.getElementById("modal_billingv2_add_new_card_address2").value.trim()),
                        locality: stripHTML(document.getElementById("modal_billingv2_add_new_card_city").value.trim()),
                        postalCode: stripHTML(document.getElementById("modal_billingv2_add_new_card_postal").value.trim()),
                        countryCodeAlpha2: stripHTML(document.getElementById("modal_billingv2_add_new_card_country").value.trim())
                    }
                })
            })
            .then(function (payload) {
                billingv2NewCardAddress = {
                    "firstname": stripHTML(document.getElementById("modal_billingv2_add_new_card_fname").value.trim()),
                    "lastname": stripHTML(document.getElementById("modal_billingv2_add_new_card_lname").value.trim()),
                    "streetaddress": stripHTML(document.getElementById("modal_billingv2_add_new_card_address1").value.trim()),
                    "extendedaddress": stripHTML(document.getElementById("modal_billingv2_add_new_card_address2").value.trim()),
                    "city": stripHTML(document.getElementById("modal_billingv2_add_new_card_city").value.trim()),
                    "countrycode": stripHTML(document.getElementById("modal_billingv2_add_new_card_country").value.trim()),
                    "zip": stripHTML(document.getElementById("modal_billingv2_add_new_card_postal").value.trim())
                }
                console.log("PAYLOAD", payload);
                payload.deviceData = billingV2DataCollector;
                billingv2StartPaymentProcess(payload);
            }).catch(function (tokenizeErr) {
                console.error(tokenizeErr);
            });
        });

    });

    billingV2BuildAddCardFormLoaded = true;

    setTimeout(function () {
        showById("modal_billingv2_add_new_card_container", "modal_billingv2_add_new_card_form_braintree_section", "modal_billingv2_add_new_card_back");
        hideByClass("busy_wait_billingv2_add_new_card");
    }, 1500);

}


var billingv2AddNewCardButton;
var billingv2AddNewCardButtonProcessToken;
function buildBillingV2Case5(info) {

    billingv2AddNewCardButtonProcessToken = info.token;

    document.getElementById("modal_billingv2_add_new_card_fname").value = "";
    document.getElementById("modal_billingv2_add_new_card_lname").value = "";
    document.getElementById("modal_billingv2_add_new_card_address1").value = "";
    document.getElementById("modal_billingv2_add_new_card_address2").value = "";
    document.getElementById("modal_billingv2_add_new_card_city").value = "";
    document.getElementById("modal_billingv2_add_new_card_postal").value = "";

    var card = paymentMethods.filter(function (obj) {
        if (obj.token === info.token) {
            return obj;
        }
    });

    card = card[0];

    console.log(card);

    var cardName = "";
    if (card.card.cardholdername != null && card.card.cardholdername.length > 0) {
        cardName = card.card.cardholdername;
    }

    var cardHtml = '<td><img src="' + card.logo + '" /></td>';
    cardHtml += '<td>' + cardName + '</td>';
    cardHtml += '<td>' + card.card.masked + '</td>';
    cardHtml += '<td>' + card.card.expiry_mo + '/' + card.card.expiry_yr + '</td>';

    document.querySelector("#modal_billingv2_add_new_card_yours_table tbody").innerHTML = cardHtml;

    console.log(card.card.address)

    if (card.card.address != null) {

        var address = card.card.address;

        var fname = address.firstname;
        var lname = address.lastname;
        var address1 = address.street;
        var address2 = address.housenamenumber;
        var city = address.city;
        var country = address.countryiso2;
        var zip = address.zip;

        if (fname != null && fname.length > 0) { document.querySelector("#modal_billingv2_add_new_card_fname").value = fname; }
        if (lname != null && lname.length > 0) { document.querySelector("#modal_billingv2_add_new_card_lname").value = lname; }
        if (address1 != null && address1.length > 0) { document.querySelector("#modal_billingv2_add_new_card_address1").value = address1; }
        if (address2 != null && address2.length > 0) { document.querySelector("#modal_billingv2_add_new_card_address2").value = address2; }
        if (city != null && city.length > 0) { document.querySelector("#modal_billingv2_add_new_card_city").value = city; }
        if (country != null && country.length > 0) { document.querySelector("#modal_billingv2_add_new_card_country").value = country; }
        if (zip != null && zip.length > 0) { document.querySelector("#modal_billingv2_add_new_card_postal").value = zip; }
    }

    document.getElementById("modal_billingv2_add_new_card_button").classList.remove("button_disabled");
    showById("modal_billingv2_add_new_card_container", "modal_billingv2_add_new_card_yours");
    hideById("modal_billingv2_add_new_card_form_braintree_section", "modal_billingv2_add_new_card_back");
    hideByClass("busy_wait_billingv2_add_new_card");
    

    billingv2AddNewCardButton = document.getElementById("modal_billingv2_add_new_card_button");
    billingv2AddNewCardButton.addEventListener('click', billingv2AddNewCardButtonProcess);

}

function billingv2AddNewCardButtonProcess() {

    document.getElementById("modal_billingv2_add_new_card_button").classList.add("button_disabled");

    var address = {
        "firstname": stripHTML(document.getElementById("modal_billingv2_add_new_card_fname").value.trim()),
        "lastname": stripHTML(document.getElementById("modal_billingv2_add_new_card_lname").value.trim()),
        "streetaddress": stripHTML(document.getElementById("modal_billingv2_add_new_card_address1").value.trim()),
        "extendedaddress": stripHTML(document.getElementById("modal_billingv2_add_new_card_address2").value.trim()),
        "city": stripHTML(document.getElementById("modal_billingv2_add_new_card_city").value.trim()),
        "countrycode": stripHTML(document.getElementById("modal_billingv2_add_new_card_country").value.trim()),
        "zip": stripHTML(document.getElementById("modal_billingv2_add_new_card_postal").value.trim())
    }

    var payload = {
        "storeId": storeId,
        "token": billingv2AddNewCardButtonProcessToken,
        "address": address
    }

    billingv2StartPaymentProcess(payload);

}
