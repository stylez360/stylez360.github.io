

function billingv2BackToNoCardsInVault() {
    divFadeIn(".overlay_forced");
    showByClass("modal_billingv2_no_cards_in_vault");
    hideByClass("modal_billingv2_add_new_card");
    loadBillingV2AddPaymentMethod();
}

var loadBillingV2AddPaymentMethodLoaded = false;

function loadBillingV2AddPaymentMethod() {
    
    if (loadBillingV2AddPaymentMethodLoaded === false) {

        hideByClass("modal_billingv2_cards_in_vault", "modal_billingv2_overview");
        showByClass("modal_billingv2_no_cards_in_vault", "busy_wait_billingv2_no_cards_in_vault");
        hideById("modal_billingv2_no_cards_in_vault_container", "modal_billingv2_no_cards_in_vault_error");

        if (billingv2VaultAvailable != null && billingv2VaultAvailable === true && billingV2InstructionsCase != 6) {
            showById("modal_billingv2_no_cards_in_vault_back");
        }

        if (billingV2InstructionsCase == "4a" || billingV2InstructionsCase == "2") {
            showById("modal_billingv2_no_cards_in_vault_back");
        }

        if (billingV2ClientId == null) {

            getBillingClientId.then(function (result) {
                loadBillingV2AddPaymentMethodLoaded = true;
                billingV2BuildPayPalDropin(result);
                
            }, function (err) {
                console.log("FAILED FAILED");
                showById("modal_billingv2_no_cards_in_vault_error");
                hideByClass("busy_wait_billingv2_no_cards_in_vault");
            });
            
        } else {
            loadBillingV2AddPaymentMethodLoaded = true;
            billingV2BuildPayPalDropin(billingV2ClientId.token);
            
        }
    } else {
        hideByClass("modal_billingv2_cards_in_vault", "modal_billingv2_overview");
        showByClass("modal_billingv2_no_cards_in_vault");
    }
}


var billingV2DropinInstance;
function billingV2BuildPayPalDropin(billingV2ClientId) {

    var chooseAnotherWayToPayTranslation = "Pay with a new PayPal Account";
    if (billingV2InstructionsCase != null && billingV2InstructionsCase === 6) {
        chooseAnotherWayToPayTranslation = "Add a new PayPal Account";
    }

    if (braintree == null || braintree.dropin == null) {
        loadBillingV2AddPaymentMethodLoaded = false;
        setTimeout(function () {
            hideById("modal_billingv2_no_cards_in_vault_container");
            showById("modal_billingv2_no_cards_in_vault_error");
            hideByClass("busy_wait_billingv2_no_cards_in_vault");
        }, 1000);
    } else {
        braintree.dropin.create({
            authorization: billingV2ClientId,
            container: '#billingv2_paypal_button_container',
            card: false,
            paypal: {
                flow: 'vault',
                buttonStyle: {
                    color: 'blue',
                    shape: 'rect',
                    size: 'medium'
                }
            },
            translations: {
                chooseAnotherWayToPay: chooseAnotherWayToPayTranslation
            },
            preselectVaultedPaymentMethod: false,
            onReady: billingV2BuildPayPalDropinReady()
        }, function (createErr, instance) {

            billingV2DropinInstance = instance;

            if (createErr) {
                // An error in the create call is likely due to
                // incorrect configuration values or network issues.
                // An appropriate error will be shown in the UI.
                console.error(createErr);
                loadBillingV2AddPaymentMethodLoaded = false;
                hideById("modal_billingv2_no_cards_in_vault_container");
                showById("modal_billingv2_no_cards_in_vault_error");
                hideByClass("busy_wait_billingv2_no_cards_in_vault");
                return;
            }

            billingV2DropinInstance.on('paymentMethodRequestable', function (event) {
                console.log(event);

                if (event.paymentMethodIsSelected) {
                    // The customer has completed the flow and we are
                    // ready to submit the payment method nonce to the server.
                    billingV2DropinInstance.requestPaymentMethod(function (requestPaymentMethodErr, payload) {
                        console.log(requestPaymentMethodErr);
                        console.log(payload)
                        billingv2StartPaymentProcess(payload);
                    });

                }

            });

        });
    }

    

}

function billingV2BuildPayPalDropinReady() {
    console.log("BUILDING DROPIN UI")
    setTimeout(function () {
        showById("modal_billingv2_no_cards_in_vault_container");
        hideByClass("busy_wait_billingv2_no_cards_in_vault");

        if (billingV2InstructionsCase != null && billingV2InstructionsCase === 6) {
            chooseAnotherWayToPayTranslation = "Add a new PayPal Account";

            var braintreeMethodsSelector = document.querySelector('[data-braintree-id="methods"]') !== null;
            if (braintreeMethodsSelector) {
                document.querySelector('[data-braintree-id="methods"]').style.display = "none";
            }
        }

    }, 1500);
}

