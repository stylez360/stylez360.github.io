
ready(function () {
    getUsageLimits();
    loadAppsDataPreset();
    loadRecentHistory();
});


var usageLimits;
var usageStoreToday;

var maxStorageLimit;
var maxBandwidthLimit;

function getUsageLimits() {
    axiosGet("/services/account/account.svc/getAccountLimits?storeId=" + storeId).then(function (data) {
        usageLimits = data.d;
        if (usageLimits !== null && usageLimits !== undefined) {
            if (usageLimits.max_storage != 0 && usageLimits.max_bandwidth != 0 && usageLimits.max_turnover != 0) {
                maxStorageLimit = parseInt(usageLimits.max_storage) / 1073741824;
                maxStorageLimit = parseFloatFixed(maxStorageLimit);

                maxBandwidthLimit = parseInt(usageLimits.max_bandwidth) / 1073741824;
                maxBandwidthLimit = parseFloatFixed(maxBandwidthLimit);

                getStoreUsageToday();
            } else {
				removeById('busy_wait_usage_allowance_parent');
            }
        } else {
			removeById('busy_wait_usage_allowance_parent');
        }
    }).catch(function (err) {
        removeById('busy_wait_usage_allowance_parent');
    });
}

function getStoreUsageToday() {
	/*showByClass('busy_wait_usage_allowance');*/
	hideById('usage_allowance_section');
    axiosGet("/services/account/account.svc/getStoreUsage?storeId=" + storeId).then(function (data) {
        usageStoreToday = data.d;
    }).catch().then(function () {
		/*hideByClass('busy_wait_usage_allowance');*/
		

        buildRevenueBar();
        buildStoragePieChart();
        buildBandwidthPieChart();
        storageChart.render();
        bandwidthChart.render();
    });
}

var maxTurnoverLimit;
var revenuePercent;

var showUsageRandomBannerWhat = null;

function buildRevenueBar() {

    if (usageLimits.max_turnover != undefined) {
        maxTurnover = usageLimits.max_turnover;
        maxTurnoverLimit = maxTurnover;
        var usedTurnover = usageStoreToday.turnover;
        usedTurnover = parseFloatFixed(usedTurnover);

        revenuePercent = usedTurnover / maxTurnover * 100;
        revenuePercent = parseFloatFixed(revenuePercent);
        var revenueText = parseFloatFixed(revenuePercent);

        var revenuePercent2 = 100 - revenuePercent;

        if (revenuePercent > 100) {
            revenuePercent = 100;
        }

        if (revenuePercent >= 50) {
            getId("revenue_allowance_box").classList.add("revenue_allowance_box_near_limit");
            showUsageRandomBannerWhat = "revenue";
            showUsageRandomBanner("revenue");
            showById('usage_allowance_section');
        }

        if (usedTurnover === 0) {
			hideById('revenue_allowance');
        }

        getId("revenue_allowance_inner_box_used").style.width = revenuePercent + "%";
		getId("revenue_allowance_inner_box_available").style.width = revenuePercent2 + "%";

        maxTurnover = parseFloatFixed(maxTurnover) - usedTurnover;

        getId("revenue_allowance_text").innerText = revenueText + "%";
        getId("revenue_allowance_inner_box_used").classList.add("revenue_allowance_inner_box_used_active");
    } else {
        hideById("revenue_allowance");
    }

}

var storageChart;
var storageUsed;
var storagePercent;
function buildStoragePieChart() {

    storageUsed = usageStoreToday.storage / 1073741824;
    storageUsed = parseFloatFixed(storageUsed);

    var maxStorage = usageLimits.max_storage / 1073741824;
    maxStorage = parseFloatFixed(maxStorage);

    storagePercent = storageUsed / maxStorage * 100;
    storagePercent = parseFloatFixed(storagePercent);

    getId("usageChartPercent_storage").innerText = storagePercent + "%";

    if ((storageUsed / maxStorage * 100) < 100) {
        if ((storageUsed / maxStorage * 100) >= 50) {

            if (showUsageRandomBannerWhat == null) {
                showUsageRandomBannerWhat = "storage";
                showUsageRandomBanner("storage");
            }

            showById('usage_allowance_section');
            storageChart = new CanvasJS.Chart("storageChartContainer", {
                colorSet: getCanvasShades(),
                animationEnabled: true,
                title: {
                    text: "Storage",
                    fontFamily: "'Raleway', sans-serif"
                },
                data: [
                    {
                        type: "doughnut",
                        yValueFormatString: "##0.00\"gb\"",
                        toolTipContent: "<b>{name}:</b> {y}",
                        dataPoints: [
                            { name: "Used", y: storageUsed, color: "#bb112b" },
                            { name: "Available", y: (maxStorage - storageUsed), color: "#ea1636" },
                        ]
                    }
                ]
            });
        } else {
            storageChart = new CanvasJS.Chart("storageChartContainer", {
                colorSet: getCanvasShades(),
                animationEnabled: true,
                title: {
                    text: "Storage",
                    fontFamily: "'Raleway', sans-serif"
                },
                data: [
                    {
                        type: "doughnut",
                        yValueFormatString: "##0.00\"gb\"",
                        toolTipContent: "<b>{name}:</b> {y}",
                        dataPoints: [
                            { name: "Used", y: storageUsed },
                            { name: "Available", y: (maxStorage - storageUsed) },
                        ]
                    }
                ]
            });
        }
    } else {
        showById('usage_allowance_section');
        storageChart = new CanvasJS.Chart("storageChartContainer", {
            colorSet: getCanvasShades(),
            animationEnabled: true,
            title: {
                text: "Storage",
                fontFamily: "'Raleway', sans-serif"
            },
            data: [
                {
                    type: "doughnut",
                    yValueFormatString: "##0.00\"gb\"",
                    color: "#ea1636",
                    toolTipContent: "<b>{name}:</b> {y}",
                    dataPoints: [
                        { name: "Limit Reached", y: storageUsed }
                    ]
                }
            ]
        });
    }


}

var bandwidthChart;
var bandwidthUsed;
var bandwidthPercent;
function buildBandwidthPieChart() {

    bandwidthUsed = usageStoreToday.bandwidth / 1073741824;
    bandwidthUsed = parseFloatFixed(bandwidthUsed);

    var maxBandwidth = usageLimits.max_bandwidth / 1073741824;
    maxBandwidth = parseFloatFixed(maxBandwidth);

    bandwidthPercent = bandwidthUsed / maxBandwidth * 100;
    bandwidthPercent = parseFloatFixed(bandwidthPercent);

    getId("usageChartPercent_bandwidth").innerText = bandwidthPercent + "%";

    if ((bandwidthUsed / maxBandwidth * 100) < 100) {
        if ((bandwidthUsed / maxBandwidth * 100) >= 50) {

            if (showUsageRandomBannerWhat == null) {
                showUsageRandomBannerWhat = "bandwidth";
                showUsageRandomBanner("bandwidth");
            }

            showById('usage_allowance_section');
            bandwidthChart = new CanvasJS.Chart("bandwidthChartContainer", {
                colorSet: getCanvasShades(),
                animationEnabled: true,
                title: {
                    text: "Bandwidth",
                    fontFamily: "'Raleway', sans-serif"
                },
                data: [
                    {
                        type: "doughnut",
                        yValueFormatString: "##0.00\"gb\"",
                        toolTipContent: "<b>{name}:</b> {y}",
                        dataPoints: [
                            { name: "Used", y: bandwidthUsed, color: "#bb112b" },
                            { name: "Available", y: (maxBandwidth - bandwidthUsed), color: "#ea1636" },
                        ]
                    }
                ]
            });
        } else {
            bandwidthChart = new CanvasJS.Chart("bandwidthChartContainer", {
                colorSet: getCanvasShades(),
                animationEnabled: true,
                title: {
                    text: "Bandwidth",
                    fontFamily: "'Raleway', sans-serif"
                },
                data: [
                    {
                        type: "doughnut",
                        yValueFormatString: "##0.00\"gb\"",
                        toolTipContent: "<b>{name}:</b> {y}",
                        dataPoints: [
                            { name: "Used", y: bandwidthUsed },
                            { name: "Available", y: (maxBandwidth - bandwidthUsed) },
                        ]
                    }
                ]
            });
        }
    } else {
        showById('usage_allowance_section');
        bandwidthChart = new CanvasJS.Chart("bandwidthChartContainer", {
            colorSet: getCanvasShades(),
            animationEnabled: true,
            title: {
                text: "Bandwidth",
                fontFamily: "'Raleway', sans-serif"
            },
            data: [
                {
                    type: "doughnut",
                    yValueFormatString: "##0.00\"gb\"",
                    color: "#ea1636",
                    toolTipContent: "<b>{name}:</b> {y}",
                    dataPoints: [
                        { name: "Limit Reached", y: bandwidthUsed }
                    ]
                }
            ]
        });
    }
}


var allUsageChartsLoaded = false;
function buttonAllUsageCharts() {
	showByClass('busy_wait_all_usage_charts');
	hideById('all_usage_charts');
    divFadeIn(".modal_overlay, .modal_all_usage_charts");
    if (allUsageChartsLoaded === false) {
        loadAllUsageCharts();
    } else {
        hideByClass("busy_wait_all_usage_charts");
        showById("all_usage_charts");
    }
}

var bandwidthAll;
var bandwidthAllData = new Array();
var storageAll;
var storageAllData = new Array();
var revenueAll;
var revenueAllData = new Array();

function loadAllUsageCharts() {

    allUsageChartsLoaded = true;

    var usageCount = 0;

    // Bandwidth
    axiosGet('/services/account/usage/usage_bandwidth.svc/getBandwidthList?storeId=' + storeId).then(function (data) {
        bandwidthAll = data.d;
        var prevNum = 0;
        var currNum = 0;
		bandwidthAll.forEach(function (bw) {
			currNum = parseFloat(bw.bandwidth);
            currNum = parseFloat(((currNum / 1024) / 1024) / 1024); // /1073741824;
            currNum = parseFloat(prevNum) + parseFloat(currNum);
            var newCurrNum = currNum.toFixed(2);
            newCurrNum = parseFloat(newCurrNum);
            bandwidthAllData.push({ label: bw.date, y: newCurrNum });
            prevNum = parseFloat(currNum.toFixed(2));
		});
    }).catch(function (err) {
        formatErrorMessageAxios(err.Message);
    }).then(function () {
        usageCount++;
        if (usageCount === 3) buildAllUsageCharts();
    });

    // Storage
    axiosGet('/services/account/usage/usage_storage.svc/getStorageList?storeId=' + storeId).then(function (data) {
        storageAll = data.d;

		storageAll.forEach(function (s) {
			var thisStorage = s.storage;
            var newUsage = 0;

			thisStorage.forEach(function (ts) {
				newUsage = newUsage + ts.usage;
			});

			newUsage = newUsage / 1073741824;
            newUsage = newUsage.toFixed(2);
            newUsage = parseInt(newUsage);

            storageAllData.push({ label: s.date, y: newUsage });
		})
    }).catch(function (err) {
        formatErrorMessageAxios(err.Message);
    }).then(function () {
        usageCount++;
        if (usageCount === 3) buildAllUsageCharts();
    });

    // Revenue
    axiosGet('/services/account/usage/usage_revenue.svc/getRevenueList?storeId=' + storeId).then(function (data) {
        revenueAll = data.d;
        var prevNum = 0;
        var currNum = 0;

		revenueAll.forEach(function (ra) {
			currNum = parseInt(ra.revenue);
            if (currNum == 0) {
                currNum = prevNum;
            } else {
                currNum = prevNum + currNum;
            }

            revenueAllData.push({ label: ra.date, y: parseInt(currNum) });
            prevNum = parseInt(currNum);
		});
    }).catch(function (err) {
        formatErrorMessageAxios(err.Message);
    }).then(function () {
        usageCount++;
        if (usageCount === 3) buildAllUsageCharts();
    });
}

function roundUpNum(num) {
    if (typeof num == "number") {
        switch (num) {
            case 1024:
                return "1Tb";
                break;
            default:
                return num + "gb";
                break;
        }
    }
}


// Build All Data
function buildAllUsageCharts() {

	showById('all_usage_charts');
	hideByClass('busy_wait_all_usage_charts');

    // Work out Turnover Max Y
    var chartTurnoverMax = usageLimits.max_turnover + 10000;
    if (usageStoreToday.turnover > usageLimits.max_turnover) {
        chartTurnoverMax = usageStoreToday.turnover + 10000;
    }

    var turnoverStorageMaxPercent = (75 / 100) * usageLimits.max_turnover;
    var turnoverStripLines = "";

    var currencySymbol = currency_options.symbol;
    if (currencySymbol === "&#8377;") {
        currencySymbol = "₹";
    }

    if (usageStoreToday.turnover >= turnoverStorageMaxPercent) {
        turnoverStripLines = {
            value: maxTurnoverLimit,
            label: "Revenue Limit:" + currencySymbol + maxTurnoverLimit,
            color: "#3bf10d",
            labelFontColor: "#3bf10d",
            labelAlign: "far",
            labelBackgroundColor: "white"
        };
    }

    // Work out Storage Max Y
    var chartStorageMax = maxStorageLimit + 1;
    if (storageUsed > maxStorageLimit) {
        chartStorageMax = storageUsed + 1;
    }

    var chartStorageMaxPercent = (75 / 100) * maxStorageLimit;
    var storageStripLines = "";
    if (storageUsed >= chartStorageMaxPercent) {
        storageStripLines = {
            value: maxStorageLimit,
            label: "Storage Limit " + maxStorageLimit + "gb",
            color: "#3A5ECA",
            labelFontColor: "#3A5ECA",
            labelAlign: "far",
            labelBackgroundColor: "white"
        };
    }

    // Work out Bandwidth Max Y
    var chartBandwidthMax = maxBandwidthLimit + 1;
    if (bandwidthUsed > maxBandwidthLimit) {
        chartBandwidthMax = bandwidthUsed + 1;
    }

    var chartBandwidthStorageMax = chartStorageMax;
    if (chartBandwidthMax > chartStorageMax) {
        chartBandwidthStorageMax = chartBandwidthMax;
    }

    var bandwidthStorageMaxPercent = (75 / 100) * maxBandwidthLimit;
    var bandwidthStripLines = "";
    if (bandwidthUsed >= bandwidthStorageMaxPercent) {
        bandwidthStripLines = {
            value: maxBandwidthLimit,
            label: "Bandwidth Limit: " + roundUpNum(maxBandwidthLimit),
            color: "#20b7e6",
            labelFontColor: "#20b7e6",
            labelAlign: "center",
            labelBackgroundColor: "white"
        };
    }

    var allUsageChart = new CanvasJS.Chart("all_usage_stat_chart", {
        animationEnabled: true,
        colorSet: getCanvasShades(),
        legend: {
            cursor: "pointer",
            itemclick: function (e) {
                if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                } else {
                    e.dataSeries.visible = true;
                }

                e.chart.render();
            }
        },
        axisY: {
            lineColor: "rgba(221,221,221,.6)",
            gridColor: "rgba(221,221,221,.8)",
            suffix: "gb",
            stripLines: [storageStripLines,
                bandwidthStripLines
            ],
            maximum: chartBandwidthStorageMax
        },
        axisY2: {
            lineColor: "rgba(221,221,221,.6)",
            gridColor: "rgba(221,221,221,.8)",
            prefix: currencySymbol,
            stripLines: [turnoverStripLines],
            maximum: chartTurnoverMax
        },
        axisX: {
            lineColor: "rgba(221,221,221,.6)",

        },
        toolTip: {
            shared: true
        },
        data: [{
            type: "line",
            name: "Storage",
            color: "#3A5ECA",
            toolTipContent: "<strong style='color: #3A5ECA;'>{name}</strong>: {y}gb",
            showInLegend: true,
            axisYIndex: 1,
            dataPoints: storageAllData
        },
        {
            type: "line",
            name: "Bandwidth",
            color: "#20b7e6",
            toolTipContent: "<strong style='color: #20b7e6;'>{name}</strong>: {y}gb",
            showInLegend: true,
            axisYIndex: 1,
            dataPoints: bandwidthAllData
        },
        {
            type: "line",
            name: "Revenue",
            color: "#3bf10d",
            toolTipContent: "<strong style='color: #3bf10d;'>{name}</strong>: " + currency_options.symbol + "{y}",
            showInLegend: true,
            axisYType: "secondary",
            dataPoints: revenueAllData
        }
        ]
    });
    allUsageChart.render();
}
